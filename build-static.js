#!/usr/bin/env node

/**
 * Build script to embed static assets into the Cloudflare Worker
 * Reads files from src/static/ and creates src/lib/static.ts
 */

const fs = require('fs');
const path = require('path');

const STATIC_DIR = 'src/static';
const OUTPUT_FILE = 'src/lib/static.ts';

function readStaticAssets() {
    const assets = {};
    
    try {
        const files = fs.readdirSync(STATIC_DIR);
        
        for (const file of files) {
            const filePath = path.join(STATIC_DIR, file);
            const stats = fs.statSync(filePath);
            
            if (stats.isFile()) {
                const content = fs.readFileSync(filePath, 'utf8');
                const routePath = `/${file}`;
                assets[routePath] = content;
            }
        }
        
        console.log(`‚úÖ Embedded ${Object.keys(assets).length} static assets`);
        return assets;
    } catch (error) {
        console.error('‚ùå Error reading static assets:', error.message);
        process.exit(1);
    }
}

function generateStaticModule(assets) {
    const assetEntries = Object.entries(assets)
        .map(([path, content]) => {
            // Escape the content for TypeScript string literal
            const escapedContent = content
                .replace(/\\/g, '\\\\')
                .replace(/`/g, '\\`')
                .replace(/\${/g, '\\${');
            
            return `  '${path}': \`${escapedContent}\``;
        })
        .join(',\n');

    const moduleContent = `/**
 * Generated static assets for Cloudflare Worker
 * DO NOT EDIT - This file is auto-generated by build-static.js
 */

export const staticAssets: Record<string, string> = {
${assetEntries}
};

export const assetPaths = Object.keys(staticAssets);
`;

    return moduleContent;
}

function writeStaticModule(content) {
    try {
        // Ensure the lib directory exists
        const libDir = path.dirname(OUTPUT_FILE);
        if (!fs.existsSync(libDir)) {
            fs.mkdirSync(libDir, { recursive: true });
        }
        
        fs.writeFileSync(OUTPUT_FILE, content, 'utf8');
        console.log(`‚úÖ Generated ${OUTPUT_FILE}`);
    } catch (error) {
        console.error('‚ùå Error writing static module:', error.message);
        process.exit(1);
    }
}

function main() {
    console.log('üî® Building static assets for Cloudflare Worker...');
    
    const assets = readStaticAssets();
    const moduleContent = generateStaticModule(assets);
    writeStaticModule(moduleContent);
    
    console.log('‚úÖ Build complete!');
}

if (require.main === module) {
    main();
}