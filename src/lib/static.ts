/**
 * Generated static assets for Cloudflare Worker
 * DO NOT EDIT - This file is auto-generated by build-static.js
 */

export const staticAssets: Record<string, string | { content: string; encoding: 'base64' }> = {
  '/static/app.js': `// Game Shell Architecture - New Main Application
// Replaces monolithic GameClient with modular GameShell + GameModules

/**
 * Main Application class that coordinates the GameShell
 */
class GameApp {
    constructor() {
        this.gameShell = null;
        this.init();
    }

    init() {
        // Initialize the game shell
        this.gameShell = new GameShell();
        
        // Integrate active rooms functionality with shell
        this.integrateActiveRooms();
        
        // Load and display version information
        this.loadVersionInfo();
        
        // Initialize the shell
        this.gameShell.init();
    }

    /**
     * Integrate active rooms functionality with GameShell
     */
    integrateActiveRooms() {
        // Override shell's loadActiveRooms with existing functionality
        this.gameShell.loadActiveRooms = () => {
            this.loadActiveRooms();
        };

        // Override shell's refresh methods
        this.gameShell.startActiveRoomsRefresh = () => {
            this.startActiveRoomsRefresh();
        };

        this.gameShell.stopActiveRoomsRefresh = () => {
            this.stopActiveRoomsRefresh();
        };

        // Add refresh button handler
        const refreshBtn = document.getElementById('refresh-rooms-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.loadActiveRooms();
            });
        }
    }

    /**
     * Load active rooms from server
     */
    async loadActiveRooms() {
        if (this.gameShell.isRefreshing) return;
        
        this.gameShell.isRefreshing = true;
        const roomsList = document.getElementById('active-rooms-list');
        
        try {
            if (roomsList) {
                roomsList.innerHTML = '<div class="loading-rooms">Loading rooms...</div>';
            }
            
            const response = await fetch('/api/active-rooms');
            const data = await response.json();
            
            if (roomsList) {
                this.displayActiveRooms(data.rooms || []);
            }
        } catch (error) {
            console.error('Failed to load active rooms:', error);
            if (roomsList) {
                roomsList.innerHTML = '<div class="error-rooms">Failed to load rooms</div>';
            }
        } finally {
            this.gameShell.isRefreshing = false;
        }
    }

    /**
     * Display active rooms in the UI
     * CRITICAL: This function creates the room display with:
     * - Proper CSS class 'join-room-btn' (NOT 'join-room-button')
     * - Player emojis from room.players array
     * - Styled room information layout
     * DO NOT REMOVE player emoji display or change button CSS class!
     */
    displayActiveRooms(rooms) {
        const roomsList = document.getElementById('active-rooms-list');
        if (!roomsList) return;

        if (rooms.length === 0) {
            roomsList.innerHTML = '<div class="no-rooms">No active rooms</div>';
            return;
        }

        roomsList.innerHTML = '';
        
        rooms.forEach(room => {
            const roomDiv = document.createElement('div');
            roomDiv.className = 'room-item';
            
            const gameType = this.formatGameName(room.gameType || 'Unknown');
            const status = room.gameStatus || 'waiting';
            
            // Generate player emojis display
            const playerEmojis = room.players && room.players.length > 0 
                ? room.players.map(player => player.emoji).join(' ')
                : '';
            
            roomDiv.innerHTML = \`
                <div class="room-info">
                    <div class="room-title">\${gameType}</div>
                    <div class="room-code">\${room.sessionId}</div>
                    <div class="room-emojis">\${playerEmojis || 'No players yet'}</div>
                    <div class="room-time">Status: \${this.formatStatus(status)}</div>
                </div>
                <button class="join-room-btn" data-room-code="\${room.sessionId}" data-game-type="\${room.gameType}">
                    Join
                </button>
                <!--
                CRITICAL: Button MUST use class 'join-room-btn' for proper green styling!
                Do NOT change to 'join-room-button' or other class names.
                -->
            \`;
            
            // Add click handler for join button
            const joinBtn = roomDiv.querySelector('.join-room-btn');
            if (joinBtn) {
                joinBtn.addEventListener('click', () => {
                    this.gameShell.joinExistingRoom(room.sessionId, room.gameType);
                });
            }
            
            roomsList.appendChild(roomDiv);
        });
    }

    /**
     * Format game name for display
     */
    formatGameName(gameType) {
        return gameType
            .split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    /**
     * Format room status for display
     */
    formatStatus(status) {
        switch (status) {
            case 'waiting': return 'Waiting';
            case 'playing': return 'In Progress';
            case 'finished': return 'Finished';
            default: return status;
        }
    }

    /**
     * Start auto-refresh for active rooms
     */
    startActiveRoomsRefresh() {
        // Clear any existing interval
        this.stopActiveRoomsRefresh();
        
        this.gameShell.refreshInterval = setInterval(() => {
            // Only refresh if on portal view and not in a game
            const portalView = document.getElementById('game-portal');
            if (portalView && portalView.classList.contains('active') && !this.gameShell.sessionId) {
                this.loadActiveRooms();
            }
        }, 5000); // Refresh every 5 seconds
    }

    /**
     * Stop auto-refresh
     */
    stopActiveRoomsRefresh() {
        if (this.gameShell.refreshInterval) {
            clearInterval(this.gameShell.refreshInterval);
            this.gameShell.refreshInterval = null;
        }
    }

    /**
     * Load and display version information
     */
    async loadVersionInfo() {
        try {
            const response = await fetch('/static/version.json');
            const versionInfo = await response.json();
            
            const versionDisplay = document.getElementById('version-display');
            if (versionDisplay) {
                versionDisplay.textContent = \`running version \${versionInfo.version}, last deployed on \${versionInfo.deployedAt}\`;
            }
        } catch (error) {
            console.warn('Could not load version info:', error);
            const versionDisplay = document.getElementById('version-display');
            if (versionDisplay) {
                versionDisplay.textContent = 'version info unavailable';
            }
        }
    }
}

// Initialize the application when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.gameApp = new GameApp();
});`,
  '/static/favicon.ico': { content: '', encoding: 'base64' },
  '/static/favicon.png': { content: '', encoding: 'base64' },
  '/static/index.html': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Premium Web Games Online Incorporated LLC Esq. GPT CBD</title>
    <link rel="icon" type="image/png" href="/static/favicon.png">
    <link rel="shortcut icon" type="image/png" href="/static/favicon.png">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <div id="app">
        <header>
            <h1 class="company-name">Premium Web Games Online Incorporated LLC Esq. GPT CBD</h1>
        </header>
        
        <main>
            <!-- Game Portal View -->
            <div id="game-portal" class="view active">
                <h2>Select a Game</h2>
                <div class="games-grid">
                    <button class="game-card" data-game="checkbox-game">
                        <h3>Checkbox Game</h3>
                        <p>Not really a game lol</p>
                    </button>
                    <button class="game-card" data-game="everybody-votes">
                        <h3>Everybody Votes</h3>
                        <p>Vote, predict, and see who knows the crowd best!</p>
                    </button>
                    <button class="game-card coming-soon" data-game="paddlin-game">
                        <h3>That's a Paddlin'</h3>
                        <p>N-way pong with paddles around a shared arena</p>
                        <div class="coming-soon-badge">Coming soon maybe lol</div>
                    </button>
                    <button class="game-card" data-game="county-game">
                        <h3>County Game</h3>
                        <p>Say your county and celebrate together!</p>
                    </button>
                    <button class="game-card coming-soon" data-game="price-game">
                        <h3>The Price is Weird</h3>
                        <p>Guess prices of real Etsy products without going over</p>
                        <div class="coming-soon-badge">Coming soon maybe lol</div>
                    </button>
                </div>
                
                <div class="join-room-section">
                    <h3>Join Existing Room</h3>
                    
                    <div class="join-layout">
                        <div class="manual-join-section">
                            <div class="join-method">
                                <h4>Enter Room Code</h4>
                                <div class="manual-join">
                                    <input type="text" id="room-code-input" placeholder="ENTER CODE">
                                    <button id="join-room-btn">Join Room</button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="active-rooms">
                            <div class="active-rooms-header">
                                <h4>Active Rooms</h4>
                                <button id="refresh-rooms-btn" class="refresh-btn" title="Refresh active rooms list">
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round">
                                        <path d="M1 4v6h6"></path>
                                        <path d="M23 20v-6h-6"></path>
                                        <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10"></path>
                                        <path d="M3.51 15A9 9 0 0 0 18.36 18.36L23 14"></path>
                                    </svg>
                                </button>
                            </div>
                            <div id="active-rooms-list" class="rooms-list">
                                <div class="loading-rooms">Loading rooms...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Game Room View -->
            <div id="game-room" class="view">
                <div class="room-header">
                    <div class="header-left">
                        <div class="rules-box" id="rules-box" style="display: none;">
                            <h3>How to Play</h3>
                            <div id="game-rules-content">
                                <!-- Game-specific rules will be populated here -->
                            </div>
                        </div>
                    </div>
                    <div class="header-right">
                        <div class="room-info">
                            <h2 id="game-title">Game Room</h2>
                            <div class="room-code">Room: <span id="room-code-display"></span></div>
                        </div>
                        <button id="leave-room-btn">Leave Room</button>
                    </div>
                </div>
                
                <!-- Combined Waiting Room Container -->
                <div class="waiting-room-container" style="background: white; border: 2px solid #e0e0e0; border-radius: 12px; padding: 25px; margin: 20px 0; display: flex; gap: 40px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                    <!-- Players List Section (Left) -->
                    <div class="players-list" style="flex: 1; min-width: 200px;">
                        <div class="players-header" style="margin-bottom: 15px;">
                            <h3 style="margin: 0; color: #333;">Players</h3>
                            <button id="start-game-btn-header">Start Game</button>
                        </div>
                        <div id="players-container" style="background: #f8f9fa; border-radius: 8px; padding: 10px; min-height: 120px;"></div>
                    </div>
                    
                    <!-- Player Identity Section (Right) -->
                    <div id="player-controls" class="player-controls" style="flex: 1; min-width: 300px; border-left: 2px solid #e0e0e0; padding-left: 30px;">
                        <div class="player-info-container">
                            <h3 style="margin: 0 0 20px 0; color: #333;">Who Are You?</h3>
                            <div class="player-info" style="display: flex; flex-direction: column; gap: 18px;">
                                <div class="name-control responsive-name-control">
                                    <label class="name-label" style="font-weight: 600; min-width: 55px; color: #555;">Name:</label>
                                    <div class="name-input-group">
                                        <input type="text" id="player-name-input" placeholder="Enter your name" maxlength="20" class="name-input">
                                        <button id="update-name-btn" class="update-btn" onmouseover="this.style.background='#0056b3'" onmouseout="this.style.background='#007bff'">Update</button>
                                    </div>
                                </div>
                                <div class="emoji-control" style="display: flex; gap: 12px; align-items: center; flex-wrap: wrap;">
                                    <label style="font-weight: 600; min-width: 55px; color: #555;">Avatar:</label>
                                    <button id="current-emoji-btn" style="padding: 10px 16px; background: white; border: 2px solid #007bff; border-radius: 6px; cursor: pointer; font-size: 28px; transition: all 0.2s; min-width: 60px;" onmouseover="this.style.background='#e3f2fd'; this.style.transform='scale(1.05)'" onmouseout="this.style.background='white'; this.style.transform='scale(1)'">🐶</button>
                                    <span style="color: #888; font-size: 13px;">Click to change</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Emoji Picker Popup (Outside container to avoid overflow issues) -->
                <div id="emoji-picker" style="display: none; position: fixed; background: white; border: 2px solid #007bff; border-radius: 10px; padding: 15px; box-shadow: 0 10px 25px rgba(0,0,0,0.2); z-index: 99999; width: 340px;">
                    <h4 style="margin: 0 0 12px 0; color: #333; font-size: 16px; border-bottom: 1px solid #e0e0e0; padding-bottom: 8px;">Choose Your Avatar</h4>
                    <div id="emoji-grid" style="display: grid; grid-template-columns: repeat(8, 1fr); gap: 6px; max-height: 280px; overflow-y: auto; padding: 5px;">
                        <!-- Animal emojis will be populated by JavaScript -->
                    </div>
                </div>
                
                <!-- Game Area - Where all game modules render -->
                <div id="game-area" class="game-area" style="display: none;">
                    <!-- Game modules will be injected here dynamically -->
                </div>
                
                <!-- Chat Area - For in-game communication -->
                <div id="chat-area" class="chat-area" style="display: none;">
                    <div class="chat-header">
                        <h3>💬 Game Chat</h3>
                    </div>
                    <div class="chat-main-container">
                        <div class="chat-messages-section">
                            <div class="chat-messages" id="chat-messages">
                                <!-- Chat messages will appear here -->
                            </div>
                            <div class="chat-input-area">
                                <input type="text" id="chat-input" placeholder="Type a message...">
                                <button id="chat-send-btn">Send</button>
                            </div>
                        </div>
                        <div class="chat-users-panel">
                            <div class="chat-users-list" id="chat-users-list">
                                <!-- Player and spectator list will appear here -->
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Universal End Game Screen -->
                <div id="end-game-screen" class="end-game-screen" style="display: none;">
                    <div class="end-game-content">
                        <h2 id="game-result-message">Game Over!</h2>
                        <div id="final-scores" class="final-scores">
                            <!-- Final scores will be populated by JavaScript -->
                        </div>
                        <button id="ok-btn" class="ok-btn">OK</button>
                    </div>
                </div>
                
                <div class="game-controls">
                    <button id="start-game-btn" style="display: none;">Start Game</button>
                    <button id="restart-game-btn" style="display: none;">Restart Game</button>
                </div>
            </div>
        </main>
        
        <!-- Loading overlay -->
        <div id="loading-overlay" class="overlay" style="display: none;">
            <div class="spinner"></div>
            <p>Connecting...</p>
        </div>
        
        <!-- Error messages -->
        <div id="error-container" class="error-container"></div>
    </div>
    
    <!-- Version Info -->
    <footer class="version-info">
        <div id="version-display">Loading version...</div>
    </footer>
    
    <!-- Game Shell Architecture -->
    <script src="/static/js/GameModule.js"></script>
    <script src="/static/js/games/CheckboxGameModule.js"></script>
    <script src="/static/js/games/ThatsAPaddlinGameModule.js"></script>
    <script src="/static/js/games/EverybodyVotesGameModule.js"></script>
    <script src="/static/js/games/CountyGameModule.js"></script>
    <script src="/static/js/games/PriceIsWeirdGameModule.js"></script>
    <script src="/static/js/GameShell.js"></script>
    <script src="/static/app.js"></script>
</body>
</html>`,
  '/static/js/GameModule.js': `/**
 * Base GameModule interface that all games must implement
 * This defines the contract between the GameShell and individual games
 */
class GameModule {
    constructor() {
        this.gameAreaElement = null;
        this.players = {};
        this.gameState = {};
        this.isActive = false;
        this.onPlayerAction = null; // Callback to shell
        this.onStateChange = null;  // Callback to shell
    }

    /**
     * Initialize the game module
     * @param {HTMLElement} gameAreaElement - The container where game UI should be rendered
     * @param {Object} players - Current players in the room
     * @param {Object} initialState - Initial game state from server
     * @param {Function} onPlayerAction - Callback for player actions (playerId, action)
     * @param {Function} onStateChange - Callback for state changes
     * @param {HTMLElement} rulesElement - Optional DOM element for game rules
     */
    init(gameAreaElement, players, initialState, onPlayerAction, onStateChange, rulesElement) {
        this.gameAreaElement = gameAreaElement;
        this.players = players;
        this.gameState = initialState || {};
        this.onPlayerAction = onPlayerAction;
        this.onStateChange = onStateChange;
        this.rulesElement = rulesElement;
        this.isActive = true;
        
        // Populate rules if element provided and game has rules
        if (this.rulesElement && typeof this.getRules === 'function') {
            const rules = this.getRules();
            if (rules) {
                this.rulesElement.innerHTML = rules;
            }
        }
        
        this.render();
    }

    /**
     * Handle game state updates from server
     * @param {Object} gameSpecificState - New game state
     */
    handleStateUpdate(gameSpecificState) {
        this.gameState = { ...this.gameState, ...gameSpecificState };
        this.render();
    }

    /**
     * Update players data from shell
     * @param {Object} players - Updated players object
     */
    updatePlayers(players) {
        this.players = players;
        // Re-render if needed to reflect player changes (like emojis)
        this.render();
    }

    /**
     * Handle player actions (from other players via WebSocket)
     * @param {string} playerId - ID of player who performed action
     * @param {Object} action - The action data
     */
    handlePlayerAction(playerId, action) {
        // Default implementation - subclasses should override
    }

    /**
     * Check if game has ended and return win condition
     * @returns {Object|null} - {winnerId, points} or null if game continues
     */
    getWinCondition() {
        // Default implementation - subclasses should override
        return null;
    }

    /**
     * Render the game UI
     * Should update the gameAreaElement with current game state
     */
    render() {
        // Default implementation - subclasses must override
        if (this.gameAreaElement) {
            this.gameAreaElement.innerHTML = '<p>Game module not implemented</p>';
        }
    }

    /**
     * Get game rules HTML (optional - override in subclasses)
     * @returns {string|null} HTML string for game rules or null if no rules
     */
    getRules() {
        return null;
    }
    
    /**
     * Clean up resources when game module is destroyed
     */
    cleanup() {
        this.isActive = false;
        if (this.gameAreaElement) {
            this.gameAreaElement.innerHTML = '';
        }
        if (this.rulesElement) {
            this.rulesElement.innerHTML = '';
        }
        this.gameAreaElement = null;
        this.rulesElement = null;
        this.players = {};
        this.gameState = {};
        this.onPlayerAction = null;
        this.onStateChange = null;
    }

    /**
     * Get the game's display name
     * @returns {string}
     */
    getDisplayName() {
        return 'Base Game';
    }

    /**
     * Get the game's unique identifier
     * @returns {string}
     */
    getGameType() {
        return 'base';
    }

    /**
     * Check if player is allowed to perform actions (not a spectator)
     * @param {string} playerId
     * @returns {boolean}
     */
    canPlayerAct(playerId) {
        const player = this.players[playerId];
        return player && !player.isSpectator;
    }
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameModule;
} else {
    window.GameModule = GameModule;
}`,
  '/static/js/GameShell.js': `/**
 * GameShell - Manages common game functionality across all games
 * Handles WebSocket connections, player management, room lifecycle, and UI shell
 */
class GameShell {
    constructor() {
        // WebSocket and connection management
        this.ws = null;
        this.sessionId = '';
        this.isConnected = false;
        
        // Player and room state
        this.currentPlayerId = null;
        this.currentPlayer = null;
        this.players = {};
        this.isSpectator = false;
        this.spectatorId = null;
        this.spectators = {};
        
        // Game state and module management
        this.gameType = '';
        this.gameModule = null;
        this.gameState = 'waiting'; // waiting, playing, finished
        this.roomState = {};
        
        // UI state
        this.currentView = 'portal';
        this.gameAreaElement = null;
        
        // Auto-refresh for active rooms
        this.refreshInterval = null;
        this.isRefreshing = false;
        
        // Chat state
        this.chatMessages = [];
    }

    /**
     * Initialize the game shell
     */
    init() {
        this.setupEventListeners();
        this.checkURLForRoom();
        this.loadActiveRooms();
        this.startActiveRoomsRefresh();
        this.initializeGameArea();
    }

    /**
     * Check URL for room code and auto-join if present
     */
    checkURLForRoom() {
        const path = window.location.pathname;
        
        // Check for game-specific paths
        if (path === '/everybody-votes') {
            console.log('Everybody Votes URL detected - auto-creating room');
            setTimeout(() => {
                this.startGame('everybody-votes');
            }, 100);
            return;
        }
        
        // Check for room codes
        const roomMatch = path.match(/^\\/([A-Z0-9]{6})$/);
        
        if (roomMatch) {
            const roomCode = roomMatch[1];
            // Auto-join the room after a short delay to ensure DOM is ready
            setTimeout(() => {
                this.joinExistingRoom(roomCode);
            }, 100);
        }
    }

    /**
     * Initialize the game area container where game modules will render
     */
    initializeGameArea() {
        this.gameAreaElement = document.getElementById('game-area');
        if (!this.gameAreaElement) {
            console.error('Game area element not found - games will not render properly');
        }
    }

    /**
     * Setup event listeners for shell functionality
     */
    setupEventListeners() {
        // Game selection
        document.querySelectorAll('.game-card').forEach(card => {
            card.addEventListener('click', (e) => {
                const gameType = e.currentTarget.dataset.game;
                const isComingSoon = e.currentTarget.classList.contains('coming-soon');
                
                if (!isComingSoon && gameType) {
                    this.startGame(gameType);
                }
            });
        });

        // Room joining
        const joinRoomBtn = document.getElementById('join-room-btn');
        const roomCodeInput = document.getElementById('room-code-input');
        
        if (joinRoomBtn && roomCodeInput) {
            joinRoomBtn.addEventListener('click', () => this.joinRoomByCode());
            roomCodeInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') this.joinRoomByCode();
            });
            roomCodeInput.addEventListener('input', this.formatRoomCodeInput.bind(this));
        }

        // Leave room
        const leaveBtn = document.getElementById('leave-room-btn');
        if (leaveBtn) {
            leaveBtn.addEventListener('click', () => this.leaveGame());
        }

        // Player controls
        this.setupPlayerControls();

        // Start game button
        const startGameBtn = document.getElementById('start-game-btn-header');
        if (startGameBtn) {
            startGameBtn.addEventListener('click', () => this.startGameSession());
        }
        
        // Chat controls
        this.setupChatControls();

        // Handle browser back/forward buttons
        window.addEventListener('popstate', (event) => {
            const path = window.location.pathname;
            const roomMatch = path.match(/^\\/([A-Z0-9]{6})$/);
            
            if (roomMatch && !this.sessionId) {
                // User navigated to a room URL
                const roomCode = roomMatch[1];
                this.joinExistingRoom(roomCode);
            } else if (!roomMatch && this.sessionId) {
                // User navigated back to root from a room
                this.leaveGame();
            }
        });
    }

    /**
     * Setup chat control event listeners
     */
    setupChatControls() {
        const chatInput = document.getElementById('chat-input');
        const chatSendBtn = document.getElementById('chat-send-btn');
        
        if (chatInput && chatSendBtn) {
            // Enable chat when connected
            const enableChat = () => {
                if (this.isConnected && (this.gameState === 'playing' || this.gameState === 'finished')) {
                    chatInput.disabled = false;
                    chatSendBtn.disabled = false;
                }
            };
            
            // Send message handler
            const sendMessage = () => {
                const message = chatInput.value.trim();
                if (message && this.ws && this.isConnected) {
                    this.ws.send(JSON.stringify({
                        type: 'chat_message',
                        data: { message }
                    }));
                    chatInput.value = '';
                }
            };
            
            chatSendBtn.addEventListener('click', sendMessage);
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            // Store enableChat function for later use
            this.enableChat = enableChat;
        }
    }
    
    /**
     * Setup player control event listeners
     */
    setupPlayerControls() {
        const updateNameBtn = document.getElementById('update-name-btn');
        const nameInput = document.getElementById('player-name-input');
        const currentEmojiBtn = document.getElementById('current-emoji-btn');

        if (updateNameBtn && nameInput) {
            updateNameBtn.addEventListener('click', () => {
                const name = nameInput.value.trim();
                if (name) this.updatePlayerName(name);
            });
            
            nameInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    const name = nameInput.value.trim();
                    if (name) this.updatePlayerName(name);
                }
            });
        }

        if (currentEmojiBtn) {
            currentEmojiBtn.addEventListener('click', () => this.showEmojiPicker());
        }

        // Close emoji picker when clicking outside
        document.addEventListener('click', (e) => {
            const picker = document.getElementById('emoji-picker');
            const emojiBtn = document.getElementById('current-emoji-btn');
            if (picker && !picker.contains(e.target) && e.target !== emojiBtn) {
                picker.style.display = 'none';
            }
        });
    }

    /**
     * Start a new game of the specified type
     */
    async startGame(gameType) {
        try {
            this.gameType = gameType;
            this.showLoadingOverlay();
            
            // Generate session ID and connect
            this.sessionId = this.generateSessionId();
            
            // Update URL to include room code
            window.history.pushState({roomCode: this.sessionId}, '', \`/\${this.sessionId}\`);
            
            await this.connectToGame();
            
        } catch (error) {
            console.error('Failed to start game:', error);
            this.showError('Failed to start game: ' + error.message);
            this.hideLoadingOverlay();
        }
    }

    /**
     * Connect to game WebSocket
     */
    connectToGame() {
        return new Promise((resolve, reject) => {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const gameTypeParam = this.gameType ? \`?gameType=\${encodeURIComponent(this.gameType)}\` : '';
            const wsUrl = \`\${protocol}//\${window.location.host}/api/game/\${this.sessionId}/ws\${gameTypeParam}\`;
            
            this.ws = new WebSocket(wsUrl);
            
            this.ws.onopen = () => {
                this.isConnected = true;
                resolve();
            };
            
            this.ws.onmessage = (event) => this.handleWebSocketMessage(event);
            this.ws.onclose = (event) => {
                this.handleWebSocketClose();
            };
            this.ws.onerror = (error) => {
                console.error('💥 WebSocket error:', error);
                reject(error);
            };
        });
    }

    /**
     * Handle incoming WebSocket messages
     */
    handleWebSocketMessage(event) {
        try {
            const message = JSON.parse(event.data);
            
            if (message.type === 'game_ended') {
                console.log('[GameShell] Received game_ended message:', message);
            }

            switch (message.type) {
                case 'gameState':
                    this.handleGameStateUpdate(message);
                    break;
                case 'game_started':
                    this.handleGameStarted(message);
                    break;
                case 'game_ended':
                    this.handleGameEnded(message);
                    break;
                case 'playerJoined':
                case 'playerLeft':
                case 'playerUpdated':
                    this.handlePlayerUpdate(message);
                    break;
                case 'spectator_identity':
                case 'spectator_joined':
                case 'spectator_left':
                    this.handleSpectatorUpdate(message);
                    break;
                case 'chat_message':
                    this.handleChatMessage(message);
                    break;
                case 'chat_history':
                    this.handleChatHistory(message);
                    break;
                case 'checkbox_toggled':
                    // Handle checkbox specific messages
                    if (this.gameModule && message.data) {
                        // Update players if gameState is included
                        if (message.data.gameState && message.data.gameState.players) {
                            this.players = message.data.gameState.players;
                            this.gameModule.updatePlayers(this.players);
                        }
                        const playerId = message.data.playerId || message.data.toggledBy || message.playerId;
                        this.gameModule.handlePlayerAction(playerId, message);
                    }
                    break;
                default:
                    
                    // Pass unknown messages to game module
                    if (this.gameModule && this.gameModule.handleMessage) {
                        this.gameModule.handleMessage(message);
                    }
            }
        } catch (error) {
            console.error('Error parsing WebSocket message:', error);
        }
    }

    /**
     * Handle game state updates from server
     */
    handleGameStateUpdate(message) {
        // Check if this is a spectator message
        if (message.isSpectator || message.spectatorId) {
            this.isSpectator = true;
            this.spectatorId = message.spectatorId;
        } else {
            this.currentPlayerId = message.playerId;
        }
        
        this.roomState = message.gameState;
        this.players = message.gameState.players || {};
        
        // Set currentPlayer after updating players
        if (this.currentPlayerId && this.players[this.currentPlayerId]) {
            this.currentPlayer = this.players[this.currentPlayerId];
        }
        
        // Extract game type from server state
        if (message.gameState.type) {
            this.gameType = message.gameState.type;
        }
        
        // Update spectators if present
        if (message.gameState.spectators) {
            this.spectators = message.gameState.spectators;
        }
        
        // Update game state based on server status
        if (message.gameState.gameStatus === 'finished') {
            this.gameState = 'finished';
        } else if (message.gameState.gameStatus === 'in-progress' || message.gameState.gameStarted) {
            this.gameState = 'playing';
        } else {
            this.gameState = 'waiting';
        }
        
        // Ensure view switches to room when we have a session
        if (this.sessionId && this.currentView === 'portal') {
            this.currentView = 'room';
        }
        
        this.updateUI();
        this.hideLoadingOverlay();
        
        // Load game module in waiting room to show rules
        if (this.gameState === 'waiting' && !this.gameModule && this.gameType) {
            this.loadGameModule(this.gameType).then(() => {
                if (this.gameModule) {
                    // Show rules box if game provides rules
                    this.updateRulesDisplay();
                }
            });
        }
        
        // If spectator and game is in progress, load the game module
        if (this.isSpectator && this.gameState === 'playing' && !this.gameModule) {
            this.loadGameModule(this.gameType || 'checkbox-game').then(() => {
                if (this.gameModule) {
                    this.gameModule.currentPlayerId = null; // No player ID for spectator
                    this.gameModule.isSpectator = true;
                    
                    // Get rules element
                    const rulesElement = document.getElementById('game-rules-content');
                    
                    this.gameModule.init(
                        this.gameAreaElement,
                        this.players,
                        {...message.gameState, hostId: message.gameState.hostId},
                        (action) => this.sendPlayerAction(action),
                        (state) => this.onGameStateChange(state),
                        rulesElement
                    );
                    
                    // Show rules box if game provides rules
                    this.updateRulesDisplay();
                }
            });
        }
        
        // Pass both updated players and game-specific state to module
        if (this.gameModule) {
            // Update players in the module
            this.gameModule.updatePlayers(this.players);
            
            // Pass game-specific state to module
            if (message.gameState.gameSpecificState) {
                this.gameModule.handleStateUpdate(message.gameState.gameSpecificState);
            }
        }
    }

    /**
     * Handle game started message
     */
    handleGameStarted(message) {
        this.gameState = 'playing';
        
        // Update room state if gameState is provided
        if (message.data?.gameState) {
            this.roomState = message.data.gameState;
        }
        
        // Load and initialize the appropriate game module
        this.loadGameModule(this.gameType).then(() => {
            if (this.gameModule) {
                // Pass current player context to module
                this.gameModule.currentPlayerId = this.currentPlayerId;
                this.gameModule.isSpectator = this.isSpectator;
                
                // Get rules element
                const rulesElement = document.getElementById('game-rules-content');
                
                this.gameModule.init(
                    this.gameAreaElement,
                    this.players,
                    {...(message.data?.gameSpecificState || {}), hostId: message.data?.gameState?.hostId || this.roomState.hostId},
                    (action) => this.sendPlayerAction(action),
                    (state) => this.onGameStateChange(state),
                    rulesElement
                );
                
                // Show rules box if game provides rules
                this.updateRulesDisplay();
                
                // Pass the game_started message to the module
                if (this.gameModule.handleMessage) {
                    this.gameModule.handleMessage(message);
                }
            }
        });

        this.updateUI();
    }

    /**
     * Handle game ended message
     */
    handleGameEnded(message) {
        console.log('[GameShell] handleGameEnded called, data:', message.data);
        this.gameState = 'finished';
        
        // Pass the game_ended message to the module before cleanup
        if (this.gameModule && this.gameModule.handleMessage) {
            this.gameModule.handleMessage(message);
        }
        
        // Clean up game module but keep it for potential restart
        if (this.gameModule) {
            this.gameModule.cleanup();
            // Don't set to null yet - keep reference until user leaves
        }
        
        this.showGameEndScreen(message.data);
        this.updateUI();
    }

    /**
     * Load the appropriate game module
     */
    async loadGameModule(gameType) {
        try {
            
            if (gameType === 'checkbox-game') {
                if (typeof CheckboxGameModule !== 'undefined') {
                    this.gameModule = new CheckboxGameModule();
                } else {
                    console.error('CheckboxGameModule class not found - check script loading');
                    this.gameModule = null;
                }
            } else if (gameType === 'everybody-votes') {
                if (typeof EverybodyVotesGameModule !== 'undefined') {
                    this.gameModule = new EverybodyVotesGameModule();
                } else {
                    console.error('EverybodyVotesGameModule class not found - check script loading');
                    this.gameModule = null;
                }
            } else if (gameType === 'county-game') {
                if (typeof CountyGameModule !== 'undefined') {
                    this.gameModule = new CountyGameModule();
                } else {
                    console.error('CountyGameModule class not found - check script loading');
                    this.gameModule = null;
                }
            } else {
                console.warn(\`Game module not implemented: \${gameType}\`);
                this.gameModule = null;
            }
        } catch (error) {
            console.error(\`Failed to load game module \${gameType}:\`, error);
            this.gameModule = null;
        }
    }

    /**
     * Send player action to server
     */
    sendPlayerAction(action) {
        if (this.ws && this.isConnected) {
            this.ws.send(JSON.stringify(action));
        } else {
            console.error('Cannot send action - WebSocket not connected');
        }
    }

    /**
     * Handle game state changes from modules
     */
    onGameStateChange(state) {
        // Module is notifying us of state changes
        // We can use this to update shell UI or send to server
    }

    /**
     * Update the main UI elements
     */
    updateUI() {
        this.updateView();
        this.updateRoomInfo();
        this.updatePlayersList();
        this.updateGameControls();
    }

    /**
     * Switch between portal and game room views
     */
    updateView() {
        const portalView = document.getElementById('game-portal');
        const roomView = document.getElementById('game-room');
        
        if (this.currentView === 'portal') {
            portalView?.classList.add('active');
            roomView?.classList.remove('active');
        } else {
            portalView?.classList.remove('active');
            roomView?.classList.add('active');
        }
    }

    /**
     * Join room by entering room code
     */
    joinRoomByCode() {
        const roomCodeInput = document.getElementById('room-code-input');
        const roomCode = roomCodeInput.value.trim().toUpperCase();
        
        if (roomCode) {
            this.joinExistingRoom(roomCode);
        } else {
            this.showError('Please enter a room code');
        }
    }

    /**
     * Join an existing room
     */
    async joinExistingRoom(roomCode, gameType = null) {
        try {
            // Don't set gameType yet - we'll get it from the server
            this.gameType = gameType; // May be null, will be set by server response
            this.sessionId = roomCode;
            this.showLoadingOverlay();
            this.stopActiveRoomsRefresh();
            
            // Update URL to include room code if not already there
            if (window.location.pathname !== \`/\${roomCode}\`) {
                window.history.pushState({roomCode: roomCode}, '', \`/\${roomCode}\`);
            }
            
            await this.connectToGame();
        } catch (error) {
            console.error('Failed to join room:', error);
            this.showError('Failed to join room: ' + error.message);
            this.hideLoadingOverlay();
        }
    }

    /**
     * Format room code input
     */
    formatRoomCodeInput(e) {
        let value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
        if (value.length > 6) {
            value = value.substring(0, 6);
        }
        e.target.value = value;
    }

    /**
     * Handle WebSocket close
     */
    handleWebSocketClose() {
        this.isConnected = false;
        this.ws = null;
        
        // Don't automatically return to portal on unexpected disconnections
        // Only do this if we're intentionally leaving (sessionId is cleared)
        if (!this.sessionId) {
            this.currentView = 'portal';
            this.updateView();
        } else {
            // Keep the room view active even without connection
            // This allows users to see the room state even if connection drops
        }
    }

    /**
     * Handle player update messages
     */
    handlePlayerUpdate(message) {
        if (message.gameState) {
            this.players = message.gameState.players || {};
            
            // Update currentPlayer if it's the current player who was updated
            if (this.currentPlayerId && this.players[this.currentPlayerId]) {
                this.currentPlayer = this.players[this.currentPlayerId];
            }
            
            // Update players in the game module too
            if (this.gameModule) {
                this.gameModule.updatePlayers(this.players);
            }
            
            this.updatePlayersList();
            this.updateCurrentPlayerInfo();
        }
    }

    /**
     * Handle incoming chat message
     */
    handleChatMessage(message) {
        if (message.data) {
            this.addChatMessage(message.data);
        }
    }
    
    /**
     * Handle chat history
     */
    handleChatHistory(message) {
        if (message.data && message.data.messages) {
            // Clear placeholder messages
            const chatMessagesEl = document.getElementById('chat-messages');
            if (chatMessagesEl) {
                chatMessagesEl.innerHTML = '';
            }
            
            // Add historical messages
            message.data.messages.forEach(msg => {
                this.addChatMessage(msg, false);
            });
        }
    }
    
    /**
     * Add a chat message to the UI
     */
    addChatMessage(messageData, scrollToBottom = true) {
        const chatMessagesEl = document.getElementById('chat-messages');
        if (!chatMessagesEl) return;
        
        // Create a wrapper for messages if it doesn't exist
        let messagesWrapper = chatMessagesEl.querySelector('.chat-messages-wrapper');
        if (!messagesWrapper) {
            messagesWrapper = document.createElement('div');
            messagesWrapper.className = 'chat-messages-wrapper';
            chatMessagesEl.appendChild(messagesWrapper);
        }
        
        const messageEl = document.createElement('div');
        messageEl.className = 'chat-message';
        
        const authorEl = document.createElement('span');
        authorEl.className = 'chat-author';
        authorEl.textContent = \`\${messageData.playerEmoji} \${messageData.playerName}\${messageData.isSpectator ? ' (spectator)' : ''}:\`;
        
        const textEl = document.createElement('span');
        textEl.className = 'chat-text';
        textEl.textContent = messageData.message;
        
        messageEl.appendChild(authorEl);
        messageEl.appendChild(textEl);
        
        messagesWrapper.appendChild(messageEl);
        
        // Store message
        this.chatMessages.push(messageData);
        
        // Scroll to bottom if requested
        if (scrollToBottom) {
            chatMessagesEl.scrollTop = chatMessagesEl.scrollHeight;
        }
    }
    
    /**
     * Handle spectator update messages
     */
    handleSpectatorUpdate(message) {
        if (message.type === 'spectator_identity') {
            this.isSpectator = true;
            this.spectatorId = message.data.spectatorId;
            
            // CRITICAL: Ensure view stays on room for spectators
            this.currentView = 'room';
            
            // Update UI to show spectator mode
            this.showSpectatorUI();
            this.updateView();
            this.hideLoadingOverlay();
        }
        
        if (message.data && message.data.spectators) {
            this.spectators = message.data.spectators;
            this.updateSpectatorsDisplay();
            this.updateChatUsersList();
        }
        
        // Update game controls for spectator
        if (this.isSpectator) {
            this.updateGameControls();
        }
    }

    /**
     * Start game session (host only)
     */
    startGameSession() {
        if (this.ws && this.isConnected) {
            this.ws.send(JSON.stringify({
                type: 'START_GAME',
                data: { gameType: this.gameType }
            }));
        }
    }

    /**
     * Update player name
     */
    updatePlayerName(name) {
        if (this.ws && this.isConnected) {
            this.ws.send(JSON.stringify({
                type: 'change_name',
                data: { newName: name }
            }));
            
            // Immediately update local state and UI
            if (this.currentPlayer) {
                this.currentPlayer.name = name;
                if (this.players[this.currentPlayerId]) {
                    this.players[this.currentPlayerId].name = name;
                }
                this.updatePlayersList();
                this.updateCurrentPlayerInfo();
            }
        }
    }

    /**
     * Show emoji picker
     * 
     * CRITICAL: EMOJI PICKER POSITIONING (PROTECTED CODE - DO NOT MODIFY)
     * This method uses specific positioning logic to solve z-index stacking issues:
     * - Moves picker to document.body to escape parent container stacking contexts
     * - Uses setProperty with 'important' flag to override CSS conflicts
     * - Calculates position after showing picker for accurate getBoundingClientRect()
     * - Forces z-index: 999999 to appear above all UI elements
     * - Handles viewport boundaries to prevent picker from appearing off-screen
     * 
     * DO NOT MODIFY this positioning logic - it was extensively debugged to solve
     * emoji picker being hidden under UI elements or appearing in wrong position.
     */
    showEmojiPicker() {
        const picker = document.getElementById('emoji-picker');
        const emojiBtn = document.getElementById('current-emoji-btn');
        
        if (picker && emojiBtn) {
            if (picker.style.display === 'none' || picker.style.display === '') {
                // Initialize emoji grid first if needed
                const emojiGrid = document.getElementById('emoji-grid');
                if (emojiGrid && emojiGrid.children.length === 0) {
                    this.initializeEmojiGrid();
                }
                
                // CRITICAL: Move picker to body to escape parent container z-index issues
                if (picker.parentElement !== document.body) {
                    document.body.appendChild(picker);
                }
                
                // Show the picker first (required for accurate height calculation)
                picker.style.display = 'block';
                
                // CRITICAL: Force position: fixed for proper positioning
                picker.style.position = 'fixed';
                
                // Calculate position relative to the button
                const rect = emojiBtn.getBoundingClientRect();
                const pickerWidth = 340; // Width set in HTML
                const pickerHeight = picker.getBoundingClientRect().height;
                
                // Calculate horizontal position - center below button
                let left = rect.left + (rect.width / 2) - (pickerWidth / 2);
                
                // Keep within viewport bounds horizontally
                if (left < 10) left = 10;
                if (left + pickerWidth > window.innerWidth - 10) {
                    left = window.innerWidth - pickerWidth - 10;
                }
                
                // Calculate vertical position - prefer below button
                let top = rect.bottom + 5;
                
                // If picker would go off bottom of screen, show above button instead
                if (top + pickerHeight > window.innerHeight - 10) {
                    top = rect.top - pickerHeight - 5;
                    // Make sure it doesn't go off top of screen
                    if (top < 10) {
                        top = rect.bottom + 5; // Fall back to below if no room above
                    }
                }
                
                // CRITICAL: Apply positioning with !important to override any conflicting styles
                picker.style.setProperty('left', left + 'px', 'important');
                picker.style.setProperty('top', top + 'px', 'important');
                picker.style.setProperty('z-index', '999999', 'important');
            } else {
                picker.style.display = 'none';
            }
        }
    }

    /**
     * Initialize emoji picker grid
     */
    initializeEmojiGrid() {
        const emojiGrid = document.getElementById('emoji-grid');
        if (!emojiGrid) return;

        const animalEmojis = [
            '🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼',
            '🐨', '🐯', '🦁', '🐮', '🐷', '🐸', '🐵', '🐔',
            '🐧', '🐦', '🐤', '🐣', '🐺', '🐗', '🐴', '🦄',
            '🐝', '🐛', '🦋', '🐌', '🐞', '🐜', '🦟', '🦗',
            '🐢', '🐍', '🦎', '🐙', '🦑', '🦐', '🦀', '🐡'
        ];

        animalEmojis.forEach(emoji => {
            const emojiBtn = document.createElement('button');
            emojiBtn.textContent = emoji;
            emojiBtn.style.cssText = 'border: 1px solid transparent; background: white; font-size: 26px; cursor: pointer; padding: 8px; border-radius: 6px; transition: all 0.2s; aspect-ratio: 1;';
            emojiBtn.addEventListener('click', () => {
                this.selectEmoji(emoji);
            });
            emojiBtn.addEventListener('mouseover', () => {
                emojiBtn.style.background = '#e3f2fd';
                emojiBtn.style.borderColor = '#007bff';
                emojiBtn.style.transform = 'scale(1.1)';
            });
            emojiBtn.addEventListener('mouseout', () => {
                emojiBtn.style.background = 'white';
                emojiBtn.style.borderColor = 'transparent';
                emojiBtn.style.transform = 'scale(1)';
            });
            emojiGrid.appendChild(emojiBtn);
        });
    }

    /**
     * Select emoji
     */
    selectEmoji(emoji) {
        if (this.ws && this.isConnected) {
            this.ws.send(JSON.stringify({
                type: 'change_emoji',
                data: { newEmoji: emoji }
            }));
        }
        
        // Immediately update local state and UI
        if (this.currentPlayer) {
            this.currentPlayer.emoji = emoji;
            if (this.players[this.currentPlayerId]) {
                this.players[this.currentPlayerId].emoji = emoji;
            }
        }
        
        // Update button immediately for feedback
        const emojiBtn = document.getElementById('current-emoji-btn');
        if (emojiBtn) {
            emojiBtn.textContent = emoji;
        }
        
        // Update all UI elements with new emoji
        this.updatePlayersList();
        this.updateCurrentPlayerInfo();
        
        // Hide picker
        const picker = document.getElementById('emoji-picker');
        if (picker) {
            picker.style.display = 'none';
        }
    }

    /**
     * Update room info display
     */
    updateRoomInfo() {
        if (this.sessionId) {
            this.currentView = 'room';
            
            const gameTitle = document.getElementById('game-title');
            if (gameTitle) {
                gameTitle.textContent = this.formatGameName(this.gameType);
            }
            
            const roomCode = document.getElementById('room-code-display');
            if (roomCode) {
                roomCode.textContent = this.sessionId;
            }
        }
    }

    /**
     * Update players list display
     */
    updatePlayersList() {
        const container = document.getElementById('players-container');
        if (!container) return;

        container.innerHTML = '';

        Object.values(this.players).forEach(player => {
            const playerDiv = document.createElement('div');
            playerDiv.className = 'player-item';
            playerDiv.dataset.playerId = player.id;

            const isHost = this.roomState.hostId === player.id;
            const isCurrentPlayer = player.id === this.currentPlayerId;

            playerDiv.innerHTML = \`
                <span class="player-emoji">\${player.emoji}</span>
                <span class="player-name">\${player.name}</span>
                <span class="player-status">
                    \${isHost ? '👑 Host' : ''}
                    \${isCurrentPlayer ? '(You)' : ''}
                </span>
            \`;

            container.appendChild(playerDiv);
        });

        this.updateStartGameButton();
        this.updateCurrentPlayerInfo();
        this.updateChatUsersList();
    }

    /**
     * Update start game button state
     */
    updateStartGameButton() {
        const startButton = document.getElementById('start-game-btn-header');
        if (!startButton) return;

        const isHost = this.roomState.hostId === this.currentPlayerId;
        const gameNotStarted = this.gameState === 'waiting';

        if (isHost && gameNotStarted) {
            startButton.style.display = 'block';
            startButton.disabled = false;
        } else {
            startButton.style.display = 'none';
        }
    }

    /**
     * Update current player info displays
     */
    updateCurrentPlayerInfo() {
        if (!this.currentPlayer) return;

        const nameInput = document.getElementById('player-name-input');
        if (nameInput) {
            nameInput.value = this.currentPlayer.name;
        }

        const emojiBtn = document.getElementById('current-emoji-btn');
        if (emojiBtn) {
            emojiBtn.textContent = this.currentPlayer.emoji;
        }
    }

    /**
     * Update rules display based on game module
     */
    updateRulesDisplay() {
        const rulesBox = document.getElementById('rules-box');
        const rulesContent = document.getElementById('game-rules-content');
        
        if (this.gameModule && typeof this.gameModule.getRules === 'function') {
            const rules = this.gameModule.getRules();
            if (rules && rulesContent) {
                rulesContent.innerHTML = rules;
                if (rulesBox) {
                    rulesBox.style.display = 'block';
                }
            }
        } else if (rulesBox) {
            rulesBox.style.display = 'none';
        }
    }
    
    /**
     * Update game controls based on game state
     */
    updateGameControls() {
        const gameArea = document.getElementById('game-area');
        const chatArea = document.getElementById('chat-area');
        const chatInput = document.getElementById('chat-input');
        const chatSendBtn = document.getElementById('chat-send-btn');
        const playerControls = document.getElementById('player-controls');
        const playersList = document.querySelector('.players-list');
        const waitingRoomContainer = document.querySelector('.waiting-room-container');

        // Special handling for spectators
        if (this.isSpectator) {
            // Always ensure spectator UI is visible
            this.showSpectatorUI();
            
            if (this.gameState === 'playing') {
                if (gameArea) gameArea.style.display = 'block';
                if (chatArea) {
                    chatArea.style.display = 'block'; // Show chat during game
                    // Enable chat for spectators too
                    if (chatInput) chatInput.disabled = false;
                    if (chatSendBtn) chatSendBtn.disabled = false;
                }
                if (playerControls) playerControls.style.display = 'none'; // Spectators can't control
                if (playersList) playersList.style.display = 'none'; // Hide during gameplay
                if (waitingRoomContainer) waitingRoomContainer.style.display = 'none'; // Hide waiting room container
            } else {
                if (gameArea) gameArea.style.display = 'none';
                if (chatArea) {
                    chatArea.style.display = 'none'; // Hide chat when not playing
                    if (chatInput) chatInput.disabled = true;
                    if (chatSendBtn) chatSendBtn.disabled = true;
                }
                if (playerControls) playerControls.style.display = 'none'; // Spectators can't control
                if (playersList) playersList.style.display = 'block'; // Show player list
                if (waitingRoomContainer) waitingRoomContainer.style.display = 'flex'; // Show waiting room container
            }
            return;
        }

        // Normal player controls
        if (this.gameState === 'playing') {
            if (gameArea) gameArea.style.display = 'block';
            if (chatArea) {
                chatArea.style.display = 'block'; // Show chat during game
                // Enable chat for players
                if (chatInput) chatInput.disabled = false;
                if (chatSendBtn) chatSendBtn.disabled = false;
            }
            if (playerControls) playerControls.style.display = 'none'; // Hide during gameplay
            if (playersList) playersList.style.display = 'none'; // Hide during gameplay
            if (waitingRoomContainer) waitingRoomContainer.style.display = 'none'; // Hide waiting room container
        } else if (this.gameState === 'finished') {
            if (gameArea) gameArea.style.display = 'block'; // Keep game visible for end screen
            if (chatArea) {
                chatArea.style.display = 'block'; // Keep chat visible at game end
                // Keep chat enabled at game end
                if (chatInput) chatInput.disabled = false;
                if (chatSendBtn) chatSendBtn.disabled = false;
            }
            if (playerControls) playerControls.style.display = 'none'; 
            if (playersList) playersList.style.display = 'none';
            if (waitingRoomContainer) waitingRoomContainer.style.display = 'none'; // Hide waiting room container
        } else if (this.gameState === 'waiting') {
            if (gameArea) gameArea.style.display = 'none';
            if (chatArea) {
                chatArea.style.display = 'block'; // Show chat in waiting room
                // Enable chat for waiting room
                if (chatInput) chatInput.disabled = false;
                if (chatSendBtn) chatSendBtn.disabled = false;
            }
            if (playerControls) playerControls.style.display = 'block';
            if (playersList) playersList.style.display = 'block';
            if (waitingRoomContainer) waitingRoomContainer.style.display = 'flex'; // Show waiting room container
        }
    }

    /**
     * Show spectator UI
     */
    showSpectatorUI() {
        // Add spectator indicator if not already present
        let spectatorIndicator = document.getElementById('spectator-indicator');
        if (!spectatorIndicator) {
            spectatorIndicator = document.createElement('div');
            spectatorIndicator.id = 'spectator-indicator';
            spectatorIndicator.className = 'spectator-indicator';
            spectatorIndicator.innerHTML = '👁️👄👁️ you are a spectator. enjoy the show 👁️👄👁️';
            spectatorIndicator.style.cssText = \`
                background: #17a2b8;
                color: white;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                margin: 10px 0;
                text-align: center;
                position: sticky;
                top: 0;
                z-index: 10000;
            \`;
            
            // Insert after room-header instead of inside room-info
            const roomHeader = document.querySelector('.room-header');
            if (roomHeader && roomHeader.parentNode) {
                roomHeader.parentNode.insertBefore(spectatorIndicator, roomHeader.nextSibling);
            }
        }
        
        // Make sure it stays visible even when game area is shown
        const indicator = document.getElementById('spectator-indicator');
        if (indicator) {
            indicator.style.display = 'block';
        }
    }

    /**
     * Update the chat users list with players and spectators
     */
    updateChatUsersList() {
        const chatUsersList = document.getElementById('chat-users-list');
        if (!chatUsersList) return;
        
        chatUsersList.innerHTML = '';
        
        // Add players section if there are any players
        if (Object.keys(this.players).length > 0) {
            const playersSection = document.createElement('div');
            playersSection.className = 'chat-users-section';
            
            const playersHeader = document.createElement('div');
            playersHeader.className = 'chat-users-header';
            playersHeader.textContent = \`Players (\${Object.keys(this.players).length})\`;
            playersSection.appendChild(playersHeader);
            
            Object.values(this.players).forEach(player => {
                const userItem = document.createElement('div');
                userItem.className = 'chat-user-item';
                
                const isHost = this.roomState.hostId === player.id;
                const isCurrentPlayer = player.id === this.currentPlayerId;
                
                userItem.innerHTML = \`
                    <span class="chat-user-emoji">\${player.emoji}</span>
                    <span class="chat-user-name">\${player.name}\${isCurrentPlayer ? ' (you!)' : ''}</span>
                    \${isHost ? '<span class="chat-user-badge">👑</span>' : ''}
                \`;
                
                playersSection.appendChild(userItem);
            });
            
            chatUsersList.appendChild(playersSection);
        }
        
        // Add spectators section if there are any spectators
        if (Object.keys(this.spectators).length > 0) {
            const spectatorsSection = document.createElement('div');
            spectatorsSection.className = 'chat-users-section';
            
            const spectatorsHeader = document.createElement('div');
            spectatorsHeader.className = 'chat-users-header';
            spectatorsHeader.textContent = \`Spectators (\${Object.keys(this.spectators).length})\`;
            spectatorsSection.appendChild(spectatorsHeader);
            
            Object.values(this.spectators).forEach(spectator => {
                const userItem = document.createElement('div');
                userItem.className = 'chat-user-item spectator';
                
                const isCurrentSpectator = spectator.id === this.spectatorId;
                
                userItem.innerHTML = \`
                    <span class="chat-user-emoji">\${spectator.emoji}</span>
                    <span class="chat-user-name">\${spectator.name}\${isCurrentSpectator ? ' (you!)' : ''}</span>
                \`;
                
                spectatorsSection.appendChild(userItem);
            });
            
            chatUsersList.appendChild(spectatorsSection);
        }
    }

    /**
     * Update spectators display
     */
    updateSpectatorsDisplay() {
        const spectatorCount = Object.keys(this.spectators).length;
        if (spectatorCount > 0) {
            // Show spectator count somewhere in UI
        }
        // Update the chat users list to show spectators
        this.updateChatUsersList();
    }

    /**
     * Show game end screen
     */
    showGameEndScreen(gameEndData) {
        console.log('[GameShell] showGameEndScreen called');
        const endScreen = document.getElementById('end-game-screen');
        const resultMessage = document.getElementById('game-result-message');
        const finalScores = document.getElementById('final-scores');
        
        console.log('[GameShell] Elements:', { endScreen: !!endScreen, resultMessage: !!resultMessage, finalScores: !!finalScores });
        
        if (endScreen && resultMessage) {
            // Update message with server's result message
            resultMessage.textContent = gameEndData.message || 'Game Complete!';
            
            // Show final scores - server sends 'scores', not 'finalScores'
            if (finalScores) {
                const scores = gameEndData.scores || gameEndData.finalScores;
                if (scores && Object.keys(scores).length > 0) {
                    // Show scores when they exist - restore normal styling
                    finalScores.innerHTML = '';
                    finalScores.style.display = 'block';
                    finalScores.style.visibility = 'visible';
                    finalScores.style.height = '';
                    finalScores.style.padding = '';
                    finalScores.style.margin = '';
                    finalScores.style.border = '';
                    
                    Object.entries(scores).forEach(([playerId, score]) => {
                        const player = this.players[playerId];
                        if (player) {
                            const scoreItem = document.createElement('div');
                            scoreItem.className = 'final-score-item';
                            scoreItem.innerHTML = \`\${player.emoji} \${player.name}: \${score}\`;
                            finalScores.appendChild(scoreItem);
                        }
                    });
                } else {
                    // Hide the scores element when there are no scores
                    finalScores.style.display = 'none';
                }
            }
            
            console.log('[GameShell] Setting endScreen.style.display = block');
            endScreen.style.display = 'block';
            
            // Handle OK button - return to lobby
            const okBtn = document.getElementById('ok-btn');
            if (okBtn) {
                okBtn.onclick = () => {
                    endScreen.style.display = 'none';
                    // Return to lobby/portal
                    this.leaveGame();
                };
            }
        } else {
            console.error('[GameShell] Cannot show end screen - missing elements:', {
                endScreen: !!endScreen,
                resultMessage: !!resultMessage
            });
        }
    }

    /**
     * Leave game and return to portal
     */
    leaveGame() {
        if (this.ws) {
            this.ws.close();
        }
        
        // Clean up game module
        if (this.gameModule) {
            this.gameModule.cleanup();
            this.gameModule = null;
        }
        
        // Reset all state
        this.currentPlayerId = null;
        this.currentPlayer = null;
        this.players = {};
        this.sessionId = '';
        this.gameType = '';
        this.gameState = 'waiting';
        this.roomState = {};
        this.isSpectator = false;
        this.spectatorId = null;
        this.spectators = {};
        
        // Clean up UI
        this.cleanupGameUI();
        
        // Restore root URL
        window.history.pushState({}, '', '/');
        
        // Return to portal
        this.currentView = 'portal';
        this.updateView();
        this.loadActiveRooms();
        this.startActiveRoomsRefresh();
    }

    /**
     * Clean up game-specific UI elements
     */
    cleanupGameUI() {
        // Hide game area
        const gameArea = document.getElementById('game-area');
        if (gameArea) {
            gameArea.style.display = 'none';
            gameArea.innerHTML = '';
        }
        
        // Hide rules box
        const rulesBox = document.getElementById('rules-box');
        if (rulesBox) {
            rulesBox.style.display = 'none';
        }
        const rulesContent = document.getElementById('game-rules-content');
        if (rulesContent) {
            rulesContent.innerHTML = '';
        }
        
        // Hide and reset chat area
        const chatArea = document.getElementById('chat-area');
        if (chatArea) {
            chatArea.style.display = 'none';
        }
        const chatMessages = document.getElementById('chat-messages');
        if (chatMessages) {
            chatMessages.innerHTML = '';
        }
        const chatInput = document.getElementById('chat-input');
        if (chatInput) {
            chatInput.value = '';
            chatInput.disabled = true;
        }
        const chatSendBtn = document.getElementById('chat-send-btn');
        if (chatSendBtn) {
            chatSendBtn.disabled = true;
        }
        this.chatMessages = [];
        
        // Hide end game screen
        const endScreen = document.getElementById('end-game-screen');
        if (endScreen) endScreen.style.display = 'none';
        
        // Remove spectator indicator
        const spectatorIndicator = document.getElementById('spectator-indicator');
        if (spectatorIndicator) spectatorIndicator.remove();
        
        // Clear players
        const playersContainer = document.getElementById('players-container');
        if (playersContainer) playersContainer.innerHTML = '';
        
        // Clear name input
        const nameInput = document.getElementById('player-name-input');
        if (nameInput) nameInput.value = '';
        
        // Remove floating emojis
        document.querySelectorAll('.floating-emoji').forEach(el => el.remove());
    }

    /**
     * Load active rooms (placeholder - integrate with existing logic)
     */
    loadActiveRooms() {
        // This will integrate with the existing active rooms logic
    }

    /**
     * Start/stop active rooms refresh
     */
    startActiveRoomsRefresh() {
        // Integrate with existing refresh logic
    }

    stopActiveRoomsRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
    }

    /**
     * Format game name for display
     */
    formatGameName(gameType) {
        // Special cases for specific games
        const gameNames = {
            'checkbox-game': 'Checkbox Game',
            'votes-game': 'Everybody Votes',
            'county-game': 'County Game',
            'paddlin-game': "That's a Paddlin'",
            'price-game': 'The Price is Weird'
        };
        
        return gameNames[gameType] || gameType
            .split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    /**
     * Utility: Generate session ID
     */
    generateSessionId() {
        return Math.random().toString(36).substr(2, 6).toUpperCase();
    }

    /**
     * Utility: Show error message
     */
    showError(message) {
        console.error(message);
        // TODO: Implement proper error UI
    }

    /**
     * Utility: Show/hide loading overlay
     */
    showLoadingOverlay() {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) overlay.style.display = 'flex';
    }

    hideLoadingOverlay() {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) overlay.style.display = 'none';
    }
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameShell;
} else {
    window.GameShell = GameShell;
}`,
  '/static/js/games/CheckboxGameModule.js': `/**
 * CheckboxGameModule - Implements the checkbox game as a GameModule
 * Manages a 3x3 grid of checkboxes where players collaborate to check all boxes
 */
class CheckboxGameModule extends GameModule {
    constructor() {
        super();
        this.checkboxStates = new Array(9).fill(false); // 3x3 grid
        this.checkboxPlayers = {}; // Track which player checked each box
        this.playerScores = {}; // Track player scores
    }

    /**
     * Initialize the checkbox game
     */
    init(gameAreaElement, players, initialState, onPlayerAction, onStateChange, rulesElement) {
        super.init(gameAreaElement, players, initialState, onPlayerAction, onStateChange, rulesElement);
        
        // Initialize game state
        if (initialState) {
            this.checkboxStates = initialState.checkboxStates || new Array(9).fill(false);
            this.checkboxPlayers = initialState.checkboxPlayers || {};
            this.playerScores = initialState.playerScores || {};
        }
        
        this.render();
    }

    /**
     * Handle state updates from server
     */
    handleStateUpdate(gameSpecificState) {
        super.handleStateUpdate(gameSpecificState);
        
        
        if (gameSpecificState.checkboxStates) {
            this.checkboxStates = gameSpecificState.checkboxStates;
        }
        if (gameSpecificState.checkboxPlayers) {
            this.checkboxPlayers = gameSpecificState.checkboxPlayers;
        }
        if (gameSpecificState.playerScores) {
            this.playerScores = gameSpecificState.playerScores;
        }
        // Update players if included in the gameSpecificState
        if (gameSpecificState.players) {
            this.players = gameSpecificState.players;
        }
        
        
        this.render();
    }

    /**
     * Handle player actions from WebSocket messages
     */
    handlePlayerAction(playerId, action) {
        switch (action.type) {
            case 'checkbox_toggled':
                if (action.data) {
                    const { checkboxIndex, newState } = action.data;
                    this.checkboxStates[checkboxIndex] = newState;
                    if (newState) {
                        this.checkboxPlayers[checkboxIndex] = playerId;
                    } else {
                        delete this.checkboxPlayers[checkboxIndex];
                    }
                    this.updateCheckboxUI(checkboxIndex, newState, playerId);
                    this.updateScoreboard();
                }
                break;
        }
    }

    /**
     * Get game rules HTML
     */
    getRules() {
        return \`
            <ul>
                <li>Click the boxes</li>
                <li>It's not much of a game, is it</li>
            </ul>
        \`;
    }
    
    /**
     * Check win condition - all checkboxes must be checked
     */
    getWinCondition() {
        const allChecked = this.checkboxStates.every(state => state === true);
        if (allChecked) {
            // Calculate final scores
            const finalScores = {};
            Object.values(this.players).forEach(player => {
                finalScores[player.id] = this.getPlayerScore(player.id);
            });
            
            // Find winner (player with most checkboxes)
            let winnerId = null;
            let maxScore = -1;
            Object.entries(finalScores).forEach(([playerId, score]) => {
                if (score > maxScore) {
                    maxScore = score;
                    winnerId = playerId;
                }
            });

            return {
                winnerId,
                points: finalScores
            };
        }
        return null;
    }

    /**
     * Render the checkbox game UI
     */
    render() {
        if (!this.gameAreaElement) return;

        this.gameAreaElement.innerHTML = \`
            <div class="checkbox-game-container">
                
                <div class="game-layout">
                    <!-- Scoreboard on the left -->
                    <div id="scoreboard" class="scoreboard">
                        <h4>Scoreboard</h4>
                        <div id="score-list" class="score-list">
                            <!-- Scores will be populated -->
                        </div>
                    </div>
                    
                    <!-- Checkbox grid in the center -->
                    <div id="checkbox-grid" class="checkbox-grid">
                        <!-- 3x3 checkbox grid will be generated -->
                    </div>
                </div>
            </div>
        \`;

        this.initializeCheckboxGrid();
        this.updateScoreboard();
    }

    /**
     * Initialize the 3x3 checkbox grid
     */
    initializeCheckboxGrid() {
        const checkboxGrid = this.gameAreaElement.querySelector('#checkbox-grid');
        if (!checkboxGrid) {
            console.error('Checkbox grid element not found!');
            return;
        }

        // Clear any existing content
        checkboxGrid.innerHTML = '';
        
        // Create 3x3 grid of checkboxes (9 total)
        for (let i = 0; i < 9; i++) {
            const checkboxItem = document.createElement('div');
            checkboxItem.className = 'checkbox-item';
            checkboxItem.dataset.index = i;
            
            const checkboxIcon = document.createElement('span');
            checkboxIcon.className = 'checkbox-icon';
            
            // Determine the icon to show (player emoji or checkmark)
            if (this.checkboxStates[i]) {
                const playerId = this.checkboxPlayers[i];
                if (playerId && this.players[playerId]) {
                    const player = this.players[playerId];
                    checkboxIcon.textContent = player.emoji || '✓';
                } else {
                    checkboxIcon.textContent = '✓';
                }
            } else {
                checkboxIcon.textContent = '';
            }
            
            checkboxItem.appendChild(checkboxIcon);
            
            // Add click handler
            checkboxItem.addEventListener('click', () => {
                this.toggleCheckbox(i);
            });
            
            checkboxGrid.appendChild(checkboxItem);
            
            // Update visual state
            if (this.checkboxStates[i]) {
                checkboxItem.classList.add('checked');
            }
        }
    }

    /**
     * Toggle a checkbox (send action to server)
     */
    toggleCheckbox(checkboxIndex) {
        // Prevent spectators from taking actions
        if (this.isSpectator) {
            this.showError?.('Spectators cannot interact with the game');
            return;
        }

        if (this.onPlayerAction) {
            // Add visual feedback
            const checkboxItem = this.gameAreaElement.querySelector(\`.checkbox-item[data-index="\${checkboxIndex}"]\`);
            if (checkboxItem) {
                checkboxItem.style.transform = 'scale(0.9)';
                setTimeout(() => {
                    checkboxItem.style.transform = '';
                }, 150);
            }
            
            // Send toggle action to server via shell
            this.onPlayerAction({
                type: 'toggle_checkbox',
                data: { checkboxIndex: checkboxIndex }
            });
        }
    }

    /**
     * Update the UI for a specific checkbox
     */
    updateCheckboxUI(checkboxIndex, newState, playerId = null) {
        const checkboxItem = this.gameAreaElement.querySelector(\`.checkbox-item[data-index="\${checkboxIndex}"]\`);
        if (!checkboxItem) return;
        
        const checkboxIcon = checkboxItem.querySelector('.checkbox-icon');
        if (!checkboxIcon) return;
        
        if (newState) {
            checkboxItem.classList.add('checked');
            
            
            // Show the player's emoji if we know who checked it
            if (playerId && this.players[playerId]) {
                const player = this.players[playerId];
                checkboxIcon.textContent = player.emoji || '✓';
            } else {
                checkboxIcon.textContent = '✓';
            }
        } else {
            checkboxItem.classList.remove('checked');
            checkboxIcon.textContent = '';
        }
    }

    /**
     * Update the scoreboard display
     */
    updateScoreboard() {
        const scoreList = this.gameAreaElement.querySelector('#score-list');
        if (!scoreList) return;
        
        scoreList.innerHTML = '';
        
        // Sort players by score (descending)
        const sortedPlayers = Object.values(this.players)
            .filter(player => !player.isSpectator)
            .sort((a, b) => this.getPlayerScore(b.id) - this.getPlayerScore(a.id));
        
        sortedPlayers.forEach(player => {
            const score = this.getPlayerScore(player.id);
            const scoreItem = document.createElement('div');
            scoreItem.className = 'score-item';
            scoreItem.innerHTML = \`
                <span class="score-player">\${player.emoji} \${player.name}</span>
                <span class="score-points">\${score}</span>
            \`;
            scoreList.appendChild(scoreItem);
        });
    }

    /**
     * Get score for a specific player
     */
    getPlayerScore(playerId) {
        let score = 0;
        for (let i = 0; i < this.checkboxStates.length; i++) {
            if (this.checkboxStates[i] && this.checkboxPlayers[i] === playerId) {
                score++;
            }
        }
        return score;
    }

    /**
     * Game-specific methods
     */
    getDisplayName() {
        return 'Checkbox Game';
    }

    getGameType() {
        return 'checkbox-game';
    }

    /**
     * Clean up checkbox game resources
     */
    cleanup() {
        this.checkboxStates = new Array(9).fill(false);
        this.checkboxPlayers = {};
        this.playerScores = {};
        super.cleanup();
    }
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CheckboxGameModule;
} else {
    window.CheckboxGameModule = CheckboxGameModule;
}`,
  '/static/js/games/CountyGameModule.js': `/**
 * CountyGameModule
 * A silly game where players submit county names and celebrate together
 */
class CountyGameModule extends GameModule {
    constructor() {
        super();
        this.currentPhase = 'WAITING'; // WAITING, COUNTY_SUBMISSION, COUNTY_ANNOUNCEMENT, GAME_OVER
        this.myCounty = null;
        this.submittedCount = 0;
        this.totalPlayers = 0;
        this.timeRemaining = 0;
        this.timerInterval = null;
        this.counties = {};
        this.currentAnnouncement = null;
        this.canConclude = false;
        this.isHost = false;
    }

    /**
     * Initialize the game
     */
    init(gameAreaElement, players, initialState, onPlayerAction, onStateChange, rulesElement) {
        super.init(gameAreaElement, players, initialState, onPlayerAction, onStateChange, rulesElement);
        
        // Check if current player is host
        if (initialState && initialState.hostId) {
            this.isHost = (this.currentPlayerId === initialState.hostId);
        }
        
        // Set initial state if provided
        if (initialState) {
            this.currentPhase = initialState.phase || 'WAITING';
            this.counties = initialState.counties || {};
            this.timeRemaining = initialState.timeLimit || 30;
            
            // Calculate time remaining from server end time
            if (initialState.submissionEndTime) {
                const now = Date.now();
                this.timeRemaining = Math.max(0, Math.floor((initialState.submissionEndTime - now) / 1000));
            }
        }
        
        this.totalPlayers = Object.keys(this.players).length;
        this.render();
    }

    /**
     * Get game rules HTML
     */
    getRules() {
        return \`
            <h3>County Game</h3>
            <ul>
                <li>enter the name of a county</li>
                <li>everybody wins!</li>
            </ul>
        \`;
    }

    /**
     * Start countdown timer
     */
    startTimer() {
        this.clearTimer();
        this.timerInterval = setInterval(() => {
            this.timeRemaining = Math.max(0, this.timeRemaining - 1);
            this.updateTimerDisplay();
            if (this.timeRemaining <= 0) {
                this.clearTimer();
            }
        }, 1000);
    }

    /**
     * Clear countdown timer
     */
    clearTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    /**
     * Update timer display
     */
    updateTimerDisplay() {
        const timerElement = this.gameAreaElement?.querySelector('.timer-display');
        if (timerElement) {
            timerElement.textContent = \`Time remaining: \${this.timeRemaining}s\`;
        }
    }

    /**
     * Update submission status without re-rendering the entire UI
     */
    updateSubmissionStatus() {
        // Update all submission status elements (both in form and in submitted view)
        const statusElements = this.gameAreaElement?.querySelectorAll('.submission-status');
        if (statusElements) {
            statusElements.forEach(element => {
                element.textContent = \`\${this.submittedCount} of \${this.totalPlayers} players submitted\`;
            });
        }
    }

    /**
     * Render the game UI based on current phase
     */
    render() {
        if (!this.gameAreaElement) return;
        
        // Preserve current input value if it exists
        const existingInput = this.gameAreaElement.querySelector('#county-input');
        const preservedValue = existingInput ? existingInput.value : '';
        
        let content = '';
        
        switch (this.currentPhase) {
            case 'WAITING':
                content = this.renderWaitingPhase();
                break;
            case 'COUNTY_SUBMISSION':
                content = this.renderSubmissionPhase();
                break;
            case 'COUNTY_ANNOUNCEMENT':
                content = this.renderAnnouncementPhase();
                break;
            case 'GAME_OVER':
                // Game over is handled by the shell's win screen
                content = '';
                break;
            default:
                content = this.renderWaitingPhase();
        }
        
        this.gameAreaElement.innerHTML = content;
        
        // Restore input value if we're still in submission phase and haven't submitted yet
        if (this.currentPhase === 'COUNTY_SUBMISSION' && !this.myCounty && preservedValue) {
            const newInput = this.gameAreaElement.querySelector('#county-input');
            if (newInput) {
                newInput.value = preservedValue;
            }
        }
        
        this.attachEventListeners();
    }

    /**
     * Render waiting phase
     */
    renderWaitingPhase() {
        return \`
            <div class="county-game-waiting">
                <h2>County Game</h2>
                <p>Waiting for the host to start the game...</p>
                <p>Get ready to share your county!</p>
            </div>
        \`;
    }

    /**
     * Render submission phase
     */
    renderSubmissionPhase() {
        const hasSubmitted = this.myCounty !== null;
        
        return \`
            <div class="county-game-submission">
                <h2>Submit Your County!</h2>
                <div class="timer-display">Time remaining: \${this.timeRemaining}s</div>
                
                \${hasSubmitted ? \`
                    <div class="submission-complete">
                        <p>✅ County submitted!</p>
                        <p class="submitted-county">You submitted: <strong>\${this.myCounty}</strong></p>
                        <p>Waiting for others...</p>
                        <div class="submission-status">
                            \${this.submittedCount} of \${this.totalPlayers} players submitted
                        </div>
                    </div>
                \` : \`
                    <div class="submission-form">
                        <p>Enter a county name (where you're from, where you live, or any county!):</p>
                        <input 
                            type="text" 
                            id="county-input" 
                            placeholder="Enter a county name..." 
                            maxlength="100"
                            autocomplete="off"
                        />
                        <button id="submit-county-btn" class="submit-btn">Submit County</button>
                        <div class="submission-status">
                            \${this.submittedCount} of \${this.totalPlayers} players submitted
                        </div>
                    </div>
                \`}
            </div>
        \`;
    }

    /**
     * Render announcement phase
     */
    renderAnnouncementPhase() {
        let content = \`
            <div class="county-game-announcement">
                <h2>County Announcements</h2>
        \`;

        if (this.currentAnnouncement) {
            content += \`
                <div class="announcement-display">
                    <div class="player-number">PLAYER \${this.currentAnnouncement.playerNumber}</div>
                    <div class="player-info">
                        <span class="player-emoji">\${this.currentAnnouncement.playerEmoji}</span>
                        <span class="player-name">\${this.currentAnnouncement.playerName}</span>
                    </div>
                    <div class="county-name">"\${this.currentAnnouncement.county}"</div>
                </div>
            \`;
        } else {
            // Show different message for host vs other players
            if (this.isHost) {
                content += \`
                    <div class="announcement-waiting">
                        <p>Click BEGIN to start the excitement!</p>
                    </div>
                \`;
            } else {
                content += \`
                    <div class="announcement-waiting">
                        <p>Waiting for host to begin announcements...</p>
                    </div>
                \`;
            }
        }

        // Show controls for host
        if (this.isHost) {
            content += '<div class="host-controls">';
            
            if (!this.currentAnnouncement) {
                content += '<button id="begin-btn" class="control-btn">BEGIN</button>';
            } else if (this.canConclude) {
                content += '<button id="conclude-btn" class="control-btn">CONCLUDE</button>';
            } else if (!this.currentAnnouncement.isLast) {
                content += '<button id="next-btn" class="control-btn">NEXT</button>';
            } else {
                content += '<p>All players announced!</p>';
                content += '<button id="conclude-btn" class="control-btn">CONCLUDE</button>';
            }
            
            content += '</div>';
        }

        content += '</div>';
        return content;
    }

    /**
     * Attach event listeners
     */
    attachEventListeners() {
        // Submit county button
        const submitBtn = this.gameAreaElement?.querySelector('#submit-county-btn');
        const countyInput = this.gameAreaElement?.querySelector('#county-input');
        
        if (submitBtn && countyInput) {
            submitBtn.addEventListener('click', () => this.submitCounty());
            countyInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.submitCounty();
                }
            });
            
            // Focus the input
            countyInput.focus();
        }

        // Announcement phase buttons (host only)
        const beginBtn = this.gameAreaElement?.querySelector('#begin-btn');
        const nextBtn = this.gameAreaElement?.querySelector('#next-btn');
        const concludeBtn = this.gameAreaElement?.querySelector('#conclude-btn');

        if (beginBtn) {
            beginBtn.addEventListener('click', () => {
                if (this.onPlayerAction) {
                    this.onPlayerAction({
                        type: 'begin_announcements'
                    });
                }
            });
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                if (this.onPlayerAction) {
                    this.onPlayerAction({
                        type: 'next_announcement'
                    });
                }
            });
        }

        if (concludeBtn) {
            concludeBtn.addEventListener('click', () => {
                if (this.onPlayerAction) {
                    this.onPlayerAction({
                        type: 'conclude_announcements'
                    });
                }
            });
        }
    }

    /**
     * Submit county to server
     */
    submitCounty() {
        const countyInput = this.gameAreaElement?.querySelector('#county-input');
        if (!countyInput) return;
        
        const county = countyInput.value.trim();
        if (!county) {
            alert('Please enter a county name!');
            return;
        }
        
        // Send to server
        if (this.onPlayerAction) {
            this.onPlayerAction({
                type: 'submit_county',
                county: county
            });
        }
        
        // Store locally
        this.myCounty = county;
        this.render();
    }

    /**
     * Handle state updates from server
     */
    handleStateUpdate(gameSpecificState) {
        super.handleStateUpdate(gameSpecificState);
        
        // Track if phase changed to determine if we need to re-render
        const previousPhase = this.currentPhase;
        
        // Check if we have the full gameState to determine host
        if (gameSpecificState.hostId) {
            this.isHost = (this.currentPlayerId === gameSpecificState.hostId);
        }
        
        if (gameSpecificState.phase) {
            this.currentPhase = gameSpecificState.phase;
        }
        
        if (gameSpecificState.counties) {
            this.counties = gameSpecificState.counties;
        }
        
        if (gameSpecificState.submissionEndTime) {
            const now = Date.now();
            this.timeRemaining = Math.max(0, Math.floor((gameSpecificState.submissionEndTime - now) / 1000));
            
            if (this.currentPhase === 'COUNTY_SUBMISSION' && this.timeRemaining > 0) {
                this.startTimer();
            }
        }
        
        // Only render if phase changed or we're not in submission phase
        // This prevents re-rendering (and clearing inputs) during submission updates
        if (previousPhase !== this.currentPhase || this.currentPhase !== 'COUNTY_SUBMISSION') {
            this.render();
        }
    }

    /**
     * Handle messages from server
     */
    handleMessage(message) {
        switch (message.type) {
            case 'phase_changed':
                this.currentPhase = message.phase;
                if (message.phase === 'COUNTY_SUBMISSION') {
                    // Clear previous submission
                    this.myCounty = null;
                    this.submittedCount = 0;
                } else if (message.phase === 'COUNTY_ANNOUNCEMENT') {
                    // Reset announcement state
                    this.currentAnnouncement = null;
                    this.canConclude = false;
                }
                this.render();
                break;
                
            case 'county_submission_started':
                this.timeRemaining = message.timeLimit || 30;
                this.startTimer();
                this.render();
                break;
                
            case 'county_submitted':
                // Confirmation of our submission
                this.myCounty = message.county;
                this.render();
                break;
                
            case 'submission_update':
                this.submittedCount = message.submittedCount;
                this.totalPlayers = message.totalPlayers;
                // Only update the submission status display, don't re-render the whole UI
                this.updateSubmissionStatus();
                break;
                
            case 'player_announcement':
                // Display the current player's county
                this.currentAnnouncement = message.data;
                this.canConclude = false;
                this.render();
                break;
                
            case 'all_announced':
                // All players have been announced, can now conclude
                this.canConclude = true;
                this.render();
                break;
                
            case 'game_ended':
                // Game ended is handled by the shell - just cleanup
                this.clearTimer();
                break;
        }
    }

    /**
     * Cleanup when leaving game
     */
    cleanup() {
        this.clearTimer();
        super.cleanup();
    }
}

// Export for use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CountyGameModule;
} else {
    window.CountyGameModule = CountyGameModule;
}`,
  '/static/js/games/EverybodyVotesGameModule.js': `/**
 * EverybodyVotesGameModule - Multi-round implementation
 * Simple voting game: Pizza or Burgers? (and more!)
 */
class EverybodyVotesGameModule extends GameModule {
    constructor() {
        super();
        this.currentPhase = 'WAITING'; // WAITING, VOTING, PREDICTING, RESULTS, ENDED
        this.question = 'Pizza or Burgers?';
        this.options = ['Pizza', 'Burgers'];
        this.myVote = null;
        this.myPrediction = null;
        this.votesCount = 0;
        this.totalPlayers = 0;
        this.results = null;
        this.timeRemaining = 0;
        this.timerInterval = null;
        this.lastVoterName = null;
        this.allVoted = false;
        
        // Multi-round state
        this.currentRound = 1;
        this.totalRounds = 3;
        this.roundResults = [];
        this.playerScores = {};
        this.finalScores = [];
        this.isHost = false;
    }

    /**
     * Initialize the game
     */
    init(gameAreaElement, players, initialState, onPlayerAction, onStateChange, rulesElement) {
        super.init(gameAreaElement, players, initialState, onPlayerAction, onStateChange, rulesElement);
        
        console.log('EverybodyVotesGameModule.init() called with initialState:', initialState);
        
        // Set initial state if provided
        if (initialState) {
            this.currentPhase = initialState.phase || 'WAITING'; // Respect server phase
            this.question = initialState.question || 'Pizza or Burgers?';
            this.options = initialState.options || ['Pizza', 'Burgers'];
            this.results = initialState.results || null;
            
            // Multi-round state
            this.currentRound = initialState.currentRound || 1;
            this.totalRounds = initialState.totalRounds || 3;
            this.roundResults = initialState.roundResults || [];
            this.playerScores = initialState.playerScores || {};
            this.finalScores = initialState.finalScores || [];
            this.isHost = initialState.isHost || false;
            
            console.log(\`Initial phase: \${this.currentPhase}, question: \${this.question}, round: \${this.currentRound}/\${this.totalRounds}\`);
        } else {
            // Default to VOTING phase
            this.currentPhase = 'VOTING';
        }
        
        this.render();
    }

    /**
     * Get game rules HTML
     */
    getRules() {
        return \`
            <h3>Everybody Votes!</h3>
            <p><strong>Multi-round voting game with predictions!</strong></p>
            <ol>
                <li>Vote for your favorite option</li>
                <li>Predict what the majority will vote for</li>
                <li>Get points for correct predictions</li>
                <li>Play \${this.totalRounds} rounds total</li>
                <li>Player with most points wins!</li>
            </ol>
            <p><em>You have time limits for both voting and predicting!</em></p>
        \`;
    }

    /**
     * Start countdown timer
     */
    startTimer() {
        this.clearTimer();
        this.timerInterval = setInterval(() => {
            this.timeRemaining = Math.max(0, this.timeRemaining - 1);
            this.updateTimerDisplay();
            if (this.timeRemaining <= 0) {
                this.clearTimer();
            }
        }, 1000);
    }

    /**
     * Clear countdown timer
     */
    clearTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
    }

    /**
     * Update timer display
     */
    updateTimerDisplay() {
        const timerElement = this.gameAreaElement?.querySelector('.timer-display');
        if (timerElement) {
            timerElement.textContent = \`Time remaining: \${this.timeRemaining}s\`;
        }
    }

    /**
     * Render the game UI based on current phase
     */
    render() {
        if (!this.gameAreaElement) return;
        
        let content = '';
        
        switch (this.currentPhase) {
            case 'WAITING':
                content = this.renderWaitingPhase();
                break;
            case 'VOTING':
                content = this.renderVotingPhase();
                break;
            case 'PREDICTING':
                content = this.renderPredictingPhase();
                break;
            case 'RESULTS':
                content = this.renderResultsPhase();
                break;
            case 'ENDED':
                content = this.renderFinalResultsPhase();
                break;
            default:
                content = this.renderWaitingPhase();
        }
        
        this.gameAreaElement.innerHTML = content;
        this.attachEventListeners();
    }

    /**
     * Get round progress indicator HTML
     */
    getRoundProgressIndicator() {
        return \`
            <div style="
                background: rgba(255, 255, 255, 0.2);
                padding: 1rem;
                border-radius: 8px;
                margin-bottom: 1.5rem;
                text-align: center;
                backdrop-filter: blur(10px);
            ">
                <h3 style="margin: 0; font-size: 1.5rem; font-weight: bold;">
                    Round \${this.currentRound} of \${this.totalRounds}
                </h3>
                <div style="
                    display: flex;
                    justify-content: center;
                    gap: 0.5rem;
                    margin-top: 0.5rem;
                ">
                    \${Array.from({length: this.totalRounds}, (_, i) => {
                        const roundNum = i + 1;
                        const isActive = roundNum === this.currentRound;
                        const isCompleted = roundNum < this.currentRound;
                        return \`
                            <div style="
                                width: 20px;
                                height: 20px;
                                border-radius: 50%;
                                background: \${isCompleted ? '#4CAF50' : isActive ? '#FFF' : 'rgba(255,255,255,0.3)'};
                                color: \${isActive && !isCompleted ? '#667eea' : '#FFF'};
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 0.8rem;
                                font-weight: bold;
                                border: 2px solid \${isActive ? '#FFF' : 'transparent'};
                            ">
                                \${isCompleted ? '✓' : roundNum}
                            </div>
                        \`;
                    }).join('')}
                </div>
            </div>
        \`;
    }

    /**
     * Render waiting phase (shouldn't normally see this)
     */
    renderWaitingPhase() {
        return \`
            <div class="everybody-votes-container" style="
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                min-height: 400px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 12px;
                padding: 2rem;
                color: white;
                text-align: center;
            ">
                \${this.getRoundProgressIndicator()}
                <h2 style="font-size: 2rem; margin-bottom: 1rem;">Everybody Votes!</h2>
                <p style="font-size: 1.2rem;">Game is starting...</p>
            </div>
        \`;
    }

    /**
     * Render voting phase
     */
    renderVotingPhase() {
        console.log('Rendering voting phase...');
        
        return \`
            <div class="everybody-votes-container" style="
                display: flex;
                flex-direction: column;
                align-items: center;
                padding: 2rem;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 12px;
                color: white;
            ">
                \${this.getRoundProgressIndicator()}
                <h2 style="font-size: 2rem; margin-bottom: 1rem;">Time to Vote!</h2>
                
                <div style="
                    background: rgba(255, 255, 255, 0.1);
                    padding: 1.5rem;
                    border-radius: 8px;
                    margin-bottom: 2rem;
                    backdrop-filter: blur(10px);
                ">
                    <h3 style="font-size: 1.8rem; margin: 0 0 1rem 0;">\${this.question}</h3>
                    \${this.votesCount > 0 ? \`
                        <div style="
                            background: rgba(255, 255, 255, 0.2);
                            padding: 1rem;
                            border-radius: 6px;
                            margin-top: 1rem;
                        ">
                            <p style="margin: 0; font-size: 1.2rem;">
                                📊 \${this.votesCount}/\${this.totalPlayers} players voted
                            </p>
                            \${this.lastVoterName ? \`
                                <p style="margin: 0.5rem 0 0 0; font-size: 1rem; opacity: 0.8;">
                                    Latest: \${this.lastVoterName}
                                </p>
                            \` : ''}
                            \${this.allVoted ? \`
                                <p style="margin: 0.5rem 0 0 0; font-size: 1rem; color: #4CAF50; font-weight: bold;">
                                    All players voted! Calculating results...
                                </p>
                            \` : ''}
                        </div>
                    \` : ''}
                </div>
                
                <div style="
                    display: flex;
                    gap: 2rem;
                    flex-wrap: wrap;
                    justify-content: center;
                ">
                    \${this.options.map((option, index) => {
                        const emojis = {
                            'Pizza': '🍕',
                            'Burgers': '🍔',
                            'Coffee': '☕',
                            'Tea': '🍵',
                            'Beach': '🏖️',
                            'Mountains': '⛰️'
                        };
                        const emoji = emojis[option] || '';
                        const color = index === 0 ? '#667eea' : '#764ba2';
                        return \`
                            <button class="vote-btn" data-vote="\${option}" style="
                                background: white;
                                color: \${color};
                                border: none;
                                padding: 2rem 3rem;
                                font-size: 2rem;
                                font-weight: bold;
                                border-radius: 12px;
                                cursor: pointer;
                                transition: all 0.3s;
                                min-width: 200px;
                                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                            " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                \${emoji} \${option}
                            </button>
                        \`;
                    }).join('')}
                </div>
            </div>
        \`;
    }

    /**
     * Render predicting phase
     */
    renderPredictingPhase() {
        console.log('Rendering predicting phase...');
        
        return \`
            <div class="everybody-votes-container" style="
                display: flex;
                flex-direction: column;
                align-items: center;
                padding: 2rem;
                background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
                border-radius: 12px;
                color: white;
            ">
                \${this.getRoundProgressIndicator()}
                <h2 style="font-size: 2rem; margin-bottom: 1rem;">🔮 Make Your Prediction!</h2>
                
                <div style="
                    background: rgba(255, 255, 255, 0.1);
                    padding: 1.5rem;
                    border-radius: 8px;
                    margin-bottom: 2rem;
                    backdrop-filter: blur(10px);
                ">
                    <h3 style="font-size: 1.8rem; margin: 0 0 1rem 0;">\${this.question}</h3>
                    <p style="font-size: 1.2rem; margin: 0;">
                        What do you think the majority voted for?
                    </p>
                    \${this.myVote ? \`
                        <div style="
                            background: rgba(255, 255, 255, 0.2);
                            padding: 1rem;
                            border-radius: 6px;
                            margin-top: 1rem;
                        ">
                            <p style="margin: 0; font-size: 1rem;">
                                Your vote: <strong>\${this.myVote}</strong>
                            </p>
                        </div>
                    \` : ''}
                </div>
                
                <div style="
                    display: flex;
                    gap: 2rem;
                    flex-wrap: wrap;
                    justify-content: center;
                ">
                    \${this.options.map((option, index) => {
                        const emojis = {
                            'Pizza': '🍕',
                            'Burgers': '🍔',
                            'Coffee': '☕',
                            'Tea': '🍵',
                            'Beach': '🏖️',
                            'Mountains': '⛰️'
                        };
                        const emoji = emojis[option] || '';
                        const color = index === 0 ? '#ff6b6b' : '#ee5a24';
                        return \`
                            <button class="prediction-btn" data-prediction="\${option}" style="
                                background: white;
                                color: \${color};
                                border: none;
                                padding: 2rem 3rem;
                                font-size: 2rem;
                                font-weight: bold;
                                border-radius: 12px;
                                cursor: pointer;
                                transition: all 0.3s;
                                min-width: 200px;
                                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                            " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                \${emoji} \${option}
                            </button>
                        \`;
                    }).join('')}
                </div>
            </div>
        \`;
    }

    /**
     * Render results phase
     */
    renderResultsPhase() {
        console.log('Rendering results phase...');
        
        if (!this.results) {
            return \`<div class="everybody-votes-container">Loading results...</div>\`;
        }
        
        const option1Votes = this.results[this.options[0]] || 0;
        const option2Votes = this.results[this.options[1]] || 0;
        const totalVotes = this.results.totalVotes || 0;
        
        const option1Percentage = totalVotes > 0 ? Math.round((option1Votes / totalVotes) * 100) : 0;
        const option2Percentage = totalVotes > 0 ? Math.round((option2Votes / totalVotes) * 100) : 0;
        
        const winner = option1Votes > option2Votes ? this.options[0] : 
                      option2Votes > option1Votes ? this.options[1] : 'Tie';
        
        const emojis = {
            'Pizza': '🍕',
            'Burgers': '🍔',
            'Coffee': '☕',
            'Tea': '🍵',
            'Beach': '🏖️',
            'Mountains': '⛰️'
        };
        
        const isLastRound = this.currentRound >= this.totalRounds;
        
        return \`
            <div class="everybody-votes-container" style="
                display: flex;
                flex-direction: column;
                align-items: center;
                padding: 2rem;
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                border-radius: 12px;
                color: white;
                text-align: center;
            ">
                \${this.getRoundProgressIndicator()}
                <h2 style="font-size: 2.5rem; margin-bottom: 1rem;">📊 Round \${this.currentRound} Results</h2>
                
                <div style="
                    background: rgba(255, 255, 255, 0.1);
                    padding: 1.5rem;
                    border-radius: 8px;
                    margin-bottom: 2rem;
                    backdrop-filter: blur(10px);
                    width: 100%;
                    max-width: 500px;
                ">
                    <h3 style="font-size: 1.8rem; margin: 0 0 1rem 0;">\${this.question}</h3>
                    
                    <div style="margin-bottom: 1rem;">
                        <div style="
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            margin-bottom: 0.5rem;
                            padding: 1rem;
                            background: rgba(255, 255, 255, 0.2);
                            border-radius: 8px;
                            \${option1Votes >= option2Votes ? 'border: 3px solid #FFD700;' : ''}
                        ">
                            <span style="font-size: 1.5rem;">\${emojis[this.options[0]] || ''} \${this.options[0]}</span>
                            <div style="display: flex; align-items: center; gap: 1rem;">
                                <div style="
                                    background: #ff6b6b;
                                    height: 20px;
                                    border-radius: 10px;
                                    width: \${Math.max(5, option1Percentage * 2)}px;
                                    max-width: 200px;
                                    transition: width 0.3s ease;
                                "></div>
                                <span style="font-weight: bold; min-width: 60px;">\${option1Votes} (\${option1Percentage}%)</span>
                                \${option1Votes >= option2Votes && option1Votes !== option2Votes ? '<span style="font-size: 1.5rem;">👑</span>' : ''}
                            </div>
                        </div>
                        
                        <div style="
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            padding: 1rem;
                            background: rgba(255, 255, 255, 0.2);
                            border-radius: 8px;
                            \${option2Votes >= option1Votes ? 'border: 3px solid #FFD700;' : ''}
                        ">
                            <span style="font-size: 1.5rem;">\${emojis[this.options[1]] || ''} \${this.options[1]}</span>
                            <div style="display: flex; align-items: center; gap: 1rem;">
                                <div style="
                                    background: #4ecdc4;
                                    height: 20px;
                                    border-radius: 10px;
                                    width: \${Math.max(5, option2Percentage * 2)}px;
                                    max-width: 200px;
                                    transition: width 0.3s ease;
                                "></div>
                                <span style="font-weight: bold; min-width: 60px;">\${option2Votes} (\${option2Percentage}%)</span>
                                \${option2Votes >= option1Votes && option1Votes !== option2Votes ? '<span style="font-size: 1.5rem;">👑</span>' : ''}
                            </div>
                        </div>
                    </div>
                    
                    <p style="font-size: 1.4rem; margin: 1rem 0; font-weight: bold;">
                        Winner: \${winner === 'Tie' ? 'It\\'s a tie!' : \`\${winner}\`}
                    </p>
                    
                    <p style="font-size: 1.2rem; margin: 1rem 0;">
                        Total votes: \${totalVotes}
                    </p>
                    
                    \${this.myPrediction ? \`
                        <div style="
                            background: rgba(255, 255, 255, 0.2);
                            padding: 1rem;
                            border-radius: 6px;
                            margin-top: 1rem;
                        ">
                            <p style="margin: 0; font-size: 1rem;">
                                Your prediction: <strong>\${this.myPrediction}</strong>
                                \${this.myPrediction === winner && winner !== 'Tie' ? ' Correct!' : ' Wrong'}
                            </p>
                        </div>
                    \` : ''}
                </div>
                
                \${isLastRound ? \`
                    <button id="end-game-btn" style="
                        background: #ff6b6b;
                        color: white;
                        border: none;
                        padding: 1rem 2rem;
                        font-size: 1.5rem;
                        font-weight: bold;
                        border-radius: 8px;
                        cursor: pointer;
                        transition: all 0.3s;
                        min-width: 200px;
                        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                        margin-top: 1rem;
                    " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                        End Game
                    </button>
                \` : (this.isHost ? \`
                    <button id="next-question-btn" style="
                        background: #FFD700;
                        color: #4CAF50;
                        border: none;
                        padding: 1rem 2rem;
                        font-size: 1.5rem;
                        font-weight: bold;
                        border-radius: 8px;
                        cursor: pointer;
                        transition: all 0.3s;
                        min-width: 200px;
                        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                        margin-top: 1rem;
                    " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                        ➡️ Next Question
                    </button>
                \` : \`
                    <p style="font-size: 1.2rem; margin: 1rem 0; opacity: 0.8;">
                        Waiting for host to continue...
                    </p>
                \`)}
            </div>
        \`;
    }

    /**
     * Render round transition phase
     */
    renderRoundTransitionPhase() {
        console.log('Rendering round transition phase...');
        
        // Get current scores display
        const scoresHtml = this.getPlayerScoresHtml();
        
        return \`
            <div class="everybody-votes-container" style="
                display: flex;
                flex-direction: column;
                align-items: center;
                padding: 2rem;
                background: linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%);
                border-radius: 12px;
                color: white;
                text-align: center;
            ">
                \${this.getRoundProgressIndicator()}
                <h2 style="font-size: 2.5rem; margin-bottom: 1rem;">Round \${this.currentRound} Complete!</h2>
                
                <div style="
                    background: rgba(255, 255, 255, 0.1);
                    padding: 1.5rem;
                    border-radius: 8px;
                    margin-bottom: 2rem;
                    backdrop-filter: blur(10px);
                    width: 100%;
                    max-width: 600px;
                ">
                    <h3 style="font-size: 1.5rem; margin: 0 0 1rem 0;">Current Standings</h3>
                    \${scoresHtml}
                </div>
                
                \${this.isHost ? \`
                    <button id="continue-round-btn" style="
                        background: #FFD700;
                        color: #8e44ad;
                        border: none;
                        padding: 1.5rem 3rem;
                        font-size: 1.8rem;
                        font-weight: bold;
                        border-radius: 12px;
                        cursor: pointer;
                        transition: all 0.3s;
                        min-width: 250px;
                        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                        🚀 Continue to Next Round
                    </button>
                \` : \`
                    <p style="font-size: 1.2rem; margin: 1rem 0; opacity: 0.8;">
                        Waiting for host to continue...
                    </p>
                \`}
            </div>
        \`;
    }

    /**
     * Render final results phase
     */
    renderFinalResultsPhase() {
        console.log('Rendering final results phase...');
        
        const finalScoresHtml = this.getFinalScoresHtml();
        const roundSummaryHtml = this.getRoundSummaryHtml();
        
        return \`
            <div class="everybody-votes-container" style="
                display: flex;
                flex-direction: column;
                align-items: center;
                padding: 2rem;
                background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
                border-radius: 12px;
                color: white;
                text-align: center;
            ">
                <h2 style="font-size: 3rem; margin-bottom: 1rem;">Game Complete!</h2>
                
                <div style="
                    background: rgba(255, 255, 255, 0.1);
                    padding: 1.5rem;
                    border-radius: 8px;
                    margin-bottom: 2rem;
                    backdrop-filter: blur(10px);
                    width: 100%;
                    max-width: 700px;
                ">
                    <h3 style="font-size: 2rem; margin: 0 0 1rem 0;">🥇 Final Leaderboard</h3>
                    \${finalScoresHtml}
                </div>
                
                <div style="
                    background: rgba(255, 255, 255, 0.1);
                    padding: 1.5rem;
                    border-radius: 8px;
                    margin-bottom: 2rem;
                    backdrop-filter: blur(10px);
                    width: 100%;
                    max-width: 700px;
                ">
                    <h3 style="font-size: 1.5rem; margin: 0 0 1rem 0;">📊 Round Summary</h3>
                    \${roundSummaryHtml}
                </div>
                
                <button id="new-game-btn" style="
                    background: #FFD700;
                    color: #c0392b;
                    border: none;
                    padding: 1.5rem 3rem;
                    font-size: 1.8rem;
                    font-weight: bold;
                    border-radius: 12px;
                    cursor: pointer;
                    transition: all 0.3s;
                    min-width: 250px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                    The End
                </button>
            </div>
        \`;
    }

    /**
     * Get player scores HTML
     */
    getPlayerScoresHtml() {
        if (!this.playerScores || Object.keys(this.playerScores).length === 0) {
            return '<p>No scores available</p>';
        }
        
        const sortedScores = Object.entries(this.playerScores)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 10); // Show top 10
        
        return \`
            <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                \${sortedScores.map(([playerId, score], index) => \`
                    <div style="
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        padding: 0.75rem;
                        background: rgba(255, 255, 255, \${index === 0 ? '0.3' : '0.15'});
                        border-radius: 6px;
                        \${index === 0 ? 'border: 2px solid #FFD700;' : ''}
                    ">
                        <span style="font-weight: bold;">
                            \${index === 0 ? '1st' : index === 1 ? '2nd' : index === 2 ? '3rd' : \`\${index + 1}.\`}
                            \${this.getPlayerName(playerId)}
                        </span>
                        <span style="font-weight: bold; font-size: 1.2rem;">
                            \${score} point\${score !== 1 ? 's' : ''}
                        </span>
                    </div>
                \`).join('')}
            </div>
        \`;
    }

    /**
     * Get final scores HTML with more details
     */
    getFinalScoresHtml() {
        if (!this.finalScores || this.finalScores.length === 0) {
            return this.getPlayerScoresHtml(); // Fallback to basic scores
        }
        
        return \`
            <div style="display: flex; flex-direction: column; gap: 0.5rem;">
                \${this.finalScores.slice(0, 10).map((player, index) => \`
                    <div style="
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        padding: 1rem;
                        background: rgba(255, 255, 255, \${index === 0 ? '0.3' : '0.15'});
                        border-radius: 8px;
                        \${index === 0 ? 'border: 3px solid #FFD700; box-shadow: 0 0 20px rgba(255, 215, 0, 0.3);' : ''}
                    ">
                        <span style="font-weight: bold; font-size: 1.2rem;">
                            \${index === 0 ? '👑' : index === 1 ? '🥈' : index === 2 ? '🥉' : \`\${index + 1}.\`}
                            \${player.name}
                        </span>
                        <div style="text-align: right;">
                            <div style="font-weight: bold; font-size: 1.4rem;">
                                \${player.score} point\${player.score !== 1 ? 's' : ''}
                            </div>
                            <div style="font-size: 0.9rem; opacity: 0.8;">
                                \${player.correctPredictions}/\${this.totalRounds} correct
                            </div>
                        </div>
                    </div>
                \`).join('')}
            </div>
        \`;
    }

    /**
     * Get round summary HTML
     */
    getRoundSummaryHtml() {
        if (!this.roundResults || this.roundResults.length === 0) {
            return '<p>No round data available</p>';
        }
        
        return \`
            <div style="display: flex; flex-direction: column; gap: 1rem;">
                \${this.roundResults.map((round, index) => \`
                    <div style="
                        padding: 1rem;
                        background: rgba(255, 255, 255, 0.15);
                        border-radius: 6px;
                        border-left: 4px solid #FFD700;
                    ">
                        <div style="font-weight: bold; margin-bottom: 0.5rem;">
                            Round \${index + 1}: \${round.question}
                        </div>
                        <div style="font-size: 0.9rem;">
                            Winner: <strong>\${round.winner}</strong> 
                            (\${round.winnerVotes}/\${round.totalVotes} votes)
                        </div>
                    </div>
                \`).join('')}
            </div>
        \`;
    }

    /**
     * Get player name from ID
     */
    getPlayerName(playerId) {
        if (this.players && this.players[playerId]) {
            return this.players[playerId].name || \`Player \${playerId.slice(-4)}\`;
        }
        return \`Player \${playerId.slice(-4)}\`;
    }

    /**
     * Attach event listeners after rendering
     */
    attachEventListeners() {
        // Vote buttons
        const voteBtns = this.gameAreaElement.querySelectorAll('.vote-btn');
        voteBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const vote = e.target.dataset.vote;
                if (vote && this.onPlayerAction) {
                    console.log(\`Player voting for: \${vote}\`);
                    this.myVote = vote; // Remember the vote
                    this.onPlayerAction({
                        type: 'submit_vote',
                        data: { vote: vote }
                    });
                }
            });
        });
        
        // Prediction buttons
        const predictionBtns = this.gameAreaElement.querySelectorAll('.prediction-btn');
        predictionBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const prediction = e.target.dataset.prediction;
                if (prediction && this.onPlayerAction) {
                    console.log(\`🔮 Player predicting: \${prediction}\`);
                    this.myPrediction = prediction; // Remember the prediction
                    this.onPlayerAction({
                        type: 'submit_prediction',
                        data: { prediction: prediction }
                    });
                }
            });
        });
        
        // Next Question button (host only, in results phase)
        const nextQuestionBtn = this.gameAreaElement.querySelector('#next-question-btn');
        if (nextQuestionBtn && this.onPlayerAction) {
            nextQuestionBtn.addEventListener('click', () => {
                console.log('➡️ Next Question button clicked');
                this.onPlayerAction({
                    type: 'advance_round',
                    data: {}
                });
            });
        }
        
        // Continue to next round button (host only) - kept for backward compatibility
        const continueRoundBtn = this.gameAreaElement.querySelector('#continue-round-btn');
        if (continueRoundBtn && this.onPlayerAction) {
            continueRoundBtn.addEventListener('click', () => {
                console.log('🚀 Continue to next round button clicked');
                this.onPlayerAction({
                    type: 'advance_round',
                    data: {}
                });
            });
        }
        
        // End Game button
        const endGameBtn = this.gameAreaElement.querySelector('#end-game-btn');
        if (endGameBtn && this.onPlayerAction) {
            endGameBtn.addEventListener('click', () => {
                console.log('End Game button clicked');
                this.onPlayerAction({
                    type: 'end_game',
                    data: {}
                });
            });
        }
        
        // New Game button
        const newGameBtn = this.gameAreaElement.querySelector('#new-game-btn');
        if (newGameBtn && this.onPlayerAction) {
            newGameBtn.addEventListener('click', () => {
                console.log('The End button clicked');
                // Show everyone wins screen
                this.showEveryoneWins();
            });
        }
    }

    /**
     * Handle player actions
     */
    handlePlayerAction(playerId, action) {
        // Actions are handled by the server
    }

    /**
     * Handle state updates from server
     */
    handleStateUpdate(gameSpecificState) {
        super.handleStateUpdate(gameSpecificState);
        
        // Update phase
        if (gameSpecificState.phase) {
            this.currentPhase = gameSpecificState.phase;
        }
        
        // Update question and options
        if (gameSpecificState.question) {
            this.question = gameSpecificState.question;
        }
        if (gameSpecificState.options) {
            this.options = gameSpecificState.options;
        }
        
        // Update results
        if (gameSpecificState.results) {
            this.results = gameSpecificState.results;
        }
        
        // Update multi-round state
        if (gameSpecificState.currentRound !== undefined) {
            this.currentRound = gameSpecificState.currentRound;
        }
        if (gameSpecificState.totalRounds !== undefined) {
            this.totalRounds = gameSpecificState.totalRounds;
        }
        if (gameSpecificState.roundResults) {
            this.roundResults = gameSpecificState.roundResults;
        }
        if (gameSpecificState.playerScores) {
            this.playerScores = gameSpecificState.playerScores;
        }
        if (gameSpecificState.finalScores) {
            this.finalScores = gameSpecificState.finalScores;
        }
        // Update host status
        if (gameSpecificState.hostId !== undefined) {
            this.isHost = (this.currentPlayerId === gameSpecificState.hostId);
        }
        if (gameSpecificState.isHost !== undefined) {
            this.isHost = gameSpecificState.isHost;
        }
        
        // Update vote counts for progress display
        if (gameSpecificState.votes) {
            this.votesCount = Object.keys(gameSpecificState.votes).length;
            // Check if we already voted
            if (gameSpecificState.votes[this.currentPlayerId]) {
                this.myVote = gameSpecificState.votes[this.currentPlayerId];
            }
        }
        
        // Update predictions
        if (gameSpecificState.predictions) {
            // Check if we already predicted
            if (gameSpecificState.predictions[this.currentPlayerId]) {
                this.myPrediction = gameSpecificState.predictions[this.currentPlayerId];
            }
        }
        
        if (gameSpecificState.players) {
            this.totalPlayers = Object.keys(gameSpecificState.players).length;
            this.players = gameSpecificState.players; // Store for name lookup
        }
        
        // Handle voting timer
        if (gameSpecificState.votingEndTime && this.currentPhase === 'VOTING') {
            this.timeRemaining = Math.max(0, Math.floor((gameSpecificState.votingEndTime - Date.now()) / 1000));
            this.startTimer();
        }
        
        // Handle prediction timer
        if (gameSpecificState.predictionEndTime && this.currentPhase === 'PREDICTING') {
            this.timeRemaining = Math.max(0, Math.floor((gameSpecificState.predictionEndTime - Date.now()) / 1000));
            this.startTimer();
        }
        
        this.render();
    }

    /**
     * Handle WebSocket messages
     */
    handleMessage(message) {
        console.log('🎮 Handling message:', message.type, message);
        
        switch (message.type) {
            case 'game_started':
                console.log('🎮 Game started message received:', message.data);
                if (message.data && message.data.phase) {
                    this.currentPhase = message.data.phase;
                    this.question = message.data.question || this.question;
                    this.options = message.data.options || this.options;
                    this.currentRound = message.data.currentRound || 1;
                    this.totalRounds = message.data.totalRounds || 3;
                    if (message.data.hostId) {
                        this.isHost = (this.currentPlayerId === message.data.hostId);
                    }
                }
                this.render();
                break;
                
            case 'phase_changed':
                this.currentPhase = message.phase;
                if (message.phase === 'PREDICTING') {
                    this.clearTimer();
                    if (message.timeLimit) {
                        this.timeRemaining = message.timeLimit;
                        this.startTimer();
                    }
                } else if (this.currentPhase !== 'VOTING' && this.currentPhase !== 'PREDICTING') {
                    this.clearTimer();
                }
                this.render();
                break;
                
            case 'voting_started':
                this.currentPhase = 'VOTING';
                this.question = message.question || 'Pizza or Burgers?';
                this.options = message.options || ['Pizza', 'Burgers'];
                this.timeRemaining = message.timeLimit || 10;
                this.myVote = null; // Reset vote for new round
                this.myPrediction = null; // Reset prediction for new round
                if (message.currentRound) this.currentRound = message.currentRound;
                if (message.totalRounds) this.totalRounds = message.totalRounds;
                this.startTimer();
                this.render();
                break;
                
            case 'predicting_started':
                console.log('🔮 Predicting phase started:', message.data);
                this.currentPhase = 'PREDICTING';
                this.timeRemaining = message.data.timeLimit || 15;
                this.startTimer();
                this.render();
                break;
                
            case 'prediction_phase':
                console.log('🔮 Prediction phase message:', message.data);
                if (message.data) {
                    this.currentPhase = message.data.phase || 'PREDICTING';
                    this.question = message.data.question || this.question;
                    this.options = message.data.options || this.options;
                    this.currentRound = message.data.currentRound || this.currentRound;
                    this.totalRounds = message.data.totalRounds || this.totalRounds;
                }
                this.render();
                break;
                
            case 'vote_confirmed':
                // Vote was successfully recorded
                this.render();
                break;
                
            case 'prediction_confirmed':
                // Prediction was successfully recorded
                this.render();
                break;
                
            case 'vote_count_update':
                this.votesCount = message.votesCount || 0;
                this.totalPlayers = message.totalPlayers || 0;
                this.render();
                break;
                
            case 'vote_progress':
                console.log('📊 Vote progress update:', message.data);
                this.votesCount = message.data.votesCount || 0;
                this.totalPlayers = message.data.totalPlayers || 0;
                this.lastVoterName = message.data.voterName;
                this.allVoted = message.data.allVoted || false;
                this.render();
                break;
                
            case 'round_results':
                console.log('📊 Round results received:', message.data);
                this.currentPhase = 'RESULTS';
                this.results = message.data.results;
                this.question = message.data.question;
                this.currentRound = message.data.currentRound;
                if (message.data.playerScores) {
                    this.playerScores = message.data.playerScores;
                }
                if (message.data.roundResults) {
                    this.roundResults = message.data.roundResults;
                }
                this.render();
                break;
                
            // Removed round_transition - we now auto-advance after results
                
            case 'host_assigned':
                console.log('👑 Host assigned:', message.data);
                this.isHost = (this.currentPlayerId === message.data.hostId);
                console.log(\`👑 Is host: \${this.isHost}, currentPlayerId: \${this.currentPlayerId}, hostId: \${message.data.hostId}\`);
                this.render();
                break;
                
            case 'voting_results':
                console.log('📊 Voting results received:', message.data);
                this.currentPhase = 'RESULTS';
                this.results = message.data.results;
                this.question = message.data.question;
                this.render();
                break;
                
            case 'final_summary':
                console.log('🏆 Final summary received:', message.data);
                this.currentPhase = 'ENDED';
                if (message.data.finalScores) {
                    this.finalScores = message.data.finalScores;
                }
                if (message.data.roundResults) {
                    this.roundResults = message.data.roundResults;
                }
                if (message.data.playerScores) {
                    this.playerScores = message.data.playerScores;
                }
                this.render();
                break;
                
            case 'advance_round':
                console.log('🚀 Advancing to next round:', message.data);
                // Server will send new_round message for the next round
                break;
                
            case 'new_round':
                console.log('🆕 New round started:', message.data);
                if (message.data) {
                    this.currentPhase = message.data.phase || 'VOTING';
                    this.question = message.data.question || this.question;
                    this.options = message.data.options || this.options;
                    this.currentRound = message.data.currentRound || this.currentRound;
                    this.totalRounds = message.data.totalRounds || this.totalRounds;
                    this.myVote = null; // Reset vote for new round
                    this.myPrediction = null; // Reset prediction for new round
                    if (message.data.hostId) {
                        this.isHost = (this.currentPlayerId === message.data.hostId);
                    }
                }
                this.render();
                break;
                
            case 'game_results':
                console.log('📊 Game results received:', message);
                this.currentPhase = 'RESULTS';
                this.results = message.results;
                this.question = message.question;
                this.render();
                break;
                
            case 'game_ended':
                console.log('🏁 Game ended:', message.data);
                // Don't handle game_ended here - let GameShell show the unified end screen
                // GameShell will call showGameEndScreen() which has the OK button to return to lobby
                break;
                
            case 'final_results':
                console.log('🏆 Final results message:', message.data);
                // Don't handle final_results here - let GameShell handle the game_ended message
                // to show the unified end screen with proper OK button functionality
                break;
                
            case 'error':
                console.error('Game error:', message.message);
                break;
                
            default:
                console.log('🤷 Unhandled message type:', message.type);
                break;
        }
    }

    /**
     * Show everyone wins screen
     */
    showEveryoneWins() {
        // Hide the game area
        this.gameAreaElement.style.display = 'none';
        
        // Show the universal end game screen
        const endGameScreen = document.getElementById('end-game-screen');
        const resultMessage = document.getElementById('game-result-message');
        const finalScores = document.getElementById('final-scores');
        const okBtn = document.getElementById('ok-btn');
        
        if (endGameScreen && resultMessage && finalScores) {
            resultMessage.textContent = '🎉 Everyone Wins! 🎉';
            
            // Show player scores
            finalScores.innerHTML = this.getPlayerScoresHtml();
            
            // Show the screen
            endGameScreen.style.display = 'flex';
            
            // Handle OK button
            if (okBtn) {
                okBtn.onclick = () => {
                    if (this.onPlayerAction) {
                        this.onPlayerAction({
                            type: 'end_game',
                            data: {}
                        });
                    }
                };
            }
        }
    }

    /**
     * Clean up game resources
     */
    cleanup() {
        super.cleanup();
        this.clearTimer();
        this.currentPhase = 'WAITING';
        this.myVote = null;
        this.myPrediction = null;
        this.results = null;
        this.votesCount = 0;
        this.totalPlayers = 0;
        this.timeRemaining = 0;
        this.lastVoterName = null;
        this.allVoted = false;
        
        // Reset multi-round state
        this.currentRound = 1;
        this.totalRounds = 3;
        this.roundResults = [];
        this.playerScores = {};
        this.finalScores = [];
        this.isHost = false;
        this.players = null;
    }
}

// Export for use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = EverybodyVotesGameModule;
} else {
    window.EverybodyVotesGameModule = EverybodyVotesGameModule;
}`,
  '/static/js/games/PriceIsWeirdGameModule.js': `/**
 * PriceGameModule - Implements "The Price is Weird" 
 * A Price is Right clone using Etsy API for real product pricing
 */
class PriceGameModule extends GameModule {
    constructor() {
        super();
        // Game state will be initialized when implemented
    }

    /**
     * Initialize the game
     */
    init(gameAreaElement, players, initialState, onPlayerAction, onStateChange) {
        super.init(gameAreaElement, players, initialState, onPlayerAction, onStateChange);
        this.render();
    }

    /**
     * Render the game UI
     */
    render() {
        if (!this.gameAreaElement) return;
        
        this.gameAreaElement.innerHTML = \`
            <div style="
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                height: 400px;
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                border-radius: 12px;
                color: white;
                text-align: center;
                padding: 2rem;
            ">
                <h2 style="font-size: 2.5rem; margin-bottom: 1rem;">The Price is Weird</h2>
                <p style="font-size: 1.2rem; opacity: 0.9; margin-bottom: 2rem;">Price is Right Clone with Etsy Products</p>
                <div style="
                    background: rgba(255, 255, 255, 0.2);
                    border-radius: 8px;
                    padding: 1.5rem 2rem;
                    backdrop-filter: blur(10px);
                ">
                    <p style="font-size: 1.1rem; margin: 0;">🚧 Coming Soon! 🚧</p>
                    <p style="font-size: 0.9rem; margin-top: 0.5rem; opacity: 0.8;">
                        Guess the price of real Etsy products without going over!
                    </p>
                </div>
            </div>
        \`;
    }

    /**
     * Handle player actions
     */
    handlePlayerAction(playerId, action) {
        // Will be implemented when game is ready
    }

    /**
     * Handle state updates from server
     */
    handleStateUpdate(gameSpecificState) {
        // Will be implemented when game is ready
        super.handleStateUpdate(gameSpecificState);
    }

    /**
     * Clean up game resources
     */
    cleanup() {
        super.cleanup();
        // Additional cleanup when implemented
    }
}

// Export for use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PriceGameModule;
} else {
    window.PriceGameModule = PriceGameModule;
}`,
  '/static/js/games/ThatsAPaddlinGameModule.js': `/**
 * PaddlinGameModule - Implements "That's a Paddlin'" (N-way pong game)
 * A multiplayer pong variant where N players control paddles around a shared play area
 */
class PaddlinGameModule extends GameModule {
    constructor() {
        super();
        // Game state will be initialized when implemented
    }

    /**
     * Initialize the game
     */
    init(gameAreaElement, players, initialState, onPlayerAction, onStateChange) {
        super.init(gameAreaElement, players, initialState, onPlayerAction, onStateChange);
        this.render();
    }

    /**
     * Render the game UI
     */
    render() {
        if (!this.gameAreaElement) return;
        
        this.gameAreaElement.innerHTML = \`
            <div style="
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                height: 400px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 12px;
                color: white;
                text-align: center;
                padding: 2rem;
            ">
                <h2 style="font-size: 2.5rem; margin-bottom: 1rem;">🏓 That's a Paddlin' 🏓</h2>
                <p style="font-size: 1.2rem; opacity: 0.9; margin-bottom: 2rem;">N-way Pong Game</p>
                <div style="
                    background: rgba(255, 255, 255, 0.2);
                    border-radius: 8px;
                    padding: 1.5rem 2rem;
                    backdrop-filter: blur(10px);
                ">
                    <p style="font-size: 1.1rem; margin: 0;">🚧 Coming Soon! 🚧</p>
                    <p style="font-size: 0.9rem; margin-top: 0.5rem; opacity: 0.8;">
                        Multiple players control paddles around a shared arena
                    </p>
                </div>
            </div>
        \`;
    }

    /**
     * Handle player actions
     */
    handlePlayerAction(playerId, action) {
        // Will be implemented when game is ready
    }

    /**
     * Handle state updates from server
     */
    handleStateUpdate(gameSpecificState) {
        // Will be implemented when game is ready
        super.handleStateUpdate(gameSpecificState);
    }

    /**
     * Clean up game resources
     */
    cleanup() {
        super.cleanup();
        // Additional cleanup when implemented
    }
}

// Export for use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PaddlinGameModule;
} else {
    window.PaddlinGameModule = PaddlinGameModule;
}`,
  '/static/styles.css': `/* Reset and base styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    color: #333;
}

#app {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Header */
header {
    background: rgba(255, 255, 255, 0.95);
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

header h1 {
    color: #2c3e50;
    font-size: 1.8rem;
    font-weight: 600;
}

/* Special styling for company name only */
header h1.company-name {
    font-family: 'Cinzel Decorative', serif;
    font-weight: 700;
    font-size: 2rem;
    color: #8b4513;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    letter-spacing: 1px;
    background: linear-gradient(135deg, #8b4513 0%, #cd853f 50%, #8b4513 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

#connection-status {
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.status-connected {
    background: #27ae60;
    color: white;
}

.status-disconnected {
    background: #e74c3c;
    color: white;
}

/* Main content */
main {
    flex: 1;
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    width: 100%;
}

/* Views */
.view {
    display: none;
}

.view.active {
    display: block;
    animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Game Portal */
#game-portal h2 {
    color: white;
    text-align: center;
    margin-bottom: 2rem;
    font-size: 2rem;
}

.games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
}

.game-card {
    position: relative;
    background: white;
    border: none;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.game-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.game-card.highlighted {
    border: 3px solid #3498db;
    box-shadow: 0 0 20px rgba(52, 152, 219, 0.3);
}

.game-card h3 {
    color: #2c3e50;
    font-size: 1.3rem;
    margin-bottom: 0.5rem;
}

.game-card p {
    color: #7f8c8d;
    font-size: 0.9rem;
}

/* Coming Soon Game Cards */
.game-card.coming-soon {
    background: 
        repeating-linear-gradient(
            45deg,
            #f1f3f4,
            #f1f3f4 4px,
            #e8eaed 4px,
            #e8eaed 8px
        );
    color: #9aa0a6;
    cursor: not-allowed;
    position: relative;
    opacity: 0.6;
    filter: grayscale(0.3);
}

.game-card.coming-soon:hover {
    transform: none;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
}

.game-card.coming-soon h3 {
    color: #80868b;
}

.game-card.coming-soon p {
    color: #9aa0a6;
}

.coming-soon-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: linear-gradient(135deg, #ff9500, #ff6b00);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.7rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    box-shadow: 0 2px 8px rgba(255, 149, 0, 0.3);
}

.join-room-section {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 16px;
    padding: 2.5rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.join-room-section h3 {
    color: #2c3e50;
    margin-bottom: 2rem;
    font-size: 1.5rem;
    font-weight: 600;
    text-align: center;
}

.join-layout {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
    align-items: start;
}

.manual-join-section {
    display: flex;
    justify-content: stretch;
}

.manual-join-section .join-method {
    width: 100%;
}

.join-method {
    flex: 1;
    background: #f8f9fa;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.join-method:hover {
    border-color: #3498db;
    box-shadow: 0 4px 20px rgba(52, 152, 219, 0.15);
    transform: translateY(-2px);
}

.join-method.active {
    border-color: #3498db;
    background: rgba(52, 152, 219, 0.05);
}

.join-method h4 {
    color: #2c3e50;
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}


.manual-join {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

#room-code-input {
    padding: 1rem 1.25rem;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    font-size: 1.1rem;
    text-transform: uppercase;
    letter-spacing: 3px;
    font-weight: 700;
    text-align: center;
    background: white;
    transition: all 0.2s ease;
}

#room-code-input:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 4px rgba(52, 152, 219, 0.15);
    transform: scale(1.02);
}

#join-room-btn {
    padding: 1rem 2rem;
    background: linear-gradient(135deg, #3498db, #2980b9);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
}

#join-room-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);
}

#join-room-btn:active {
    transform: translateY(-1px);
}

.active-rooms {
    background: #f8f9fa;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    height: fit-content;
}

.active-rooms:hover {
    border-color: #3498db;
    box-shadow: 0 4px 20px rgba(52, 152, 219, 0.15);
}

.active-rooms-header {
    position: relative;
    margin-bottom: 1.2rem;
}

.active-rooms h4 {
    color: #2c3e50;
    margin: 0;
    font-size: 1.2rem;
    font-weight: 600;
    text-align: center;
    position: relative;
}

.refresh-btn {
    position: absolute;
    top: 0;
    right: 8px;
    background: none;
    border: none;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.15s ease;
    color: #8e9297;
    opacity: 0.4;
    border-radius: 3px;
}

.refresh-btn:hover {
    color: #2c3e50;
    opacity: 0.8;
    background: rgba(52, 152, 219, 0.08);
}

.refresh-btn:active {
    transform: scale(0.9);
}

.refresh-btn.refreshing {
    animation: spin 1s linear infinite;
    pointer-events: none;
    opacity: 0.7;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.active-rooms h4::before {
    content: '';
    position: absolute;
    bottom: -0.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: linear-gradient(135deg, #3498db, #2980b9);
    border-radius: 2px;
}

.rooms-list {
    display: grid;
    gap: 1rem;
    max-height: 400px;
    overflow-y: auto;
    padding-right: 0.5rem;
}

.rooms-list::-webkit-scrollbar {
    width: 6px;
}

.rooms-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.rooms-list::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
}

.rooms-list::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

.room-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 1.25rem;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
}

.room-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(135deg, #27ae60, #219a52);
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.room-item:hover {
    border-color: #3498db;
    box-shadow: 0 6px 20px rgba(52, 152, 219, 0.15);
    transform: translateY(-2px);
}

.room-item:hover::before {
    transform: scaleX(1);
}

.room-info {
    flex: 1;
}

.room-title {
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
}


.room-code {
    font-family: 'Courier New', monospace;
    font-size: 1rem;
    color: #6c757d;
    margin-bottom: 0.5rem;
    background: rgba(52, 152, 219, 0.1);
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    display: inline-block;
    font-weight: 600;
    letter-spacing: 1px;
}

/* CRITICAL: Player emoji display in active rooms - DO NOT REMOVE */
.room-emojis {
    font-size: 1.4rem;
    line-height: 1.5;
    margin: 0.5rem 0;
    letter-spacing: 0.3em;
    min-height: 2rem;
    color: #333;
    font-weight: 500;
}

.room-time {
    font-size: 0.8rem;
    color: #6c757d;
    opacity: 0.8;
}

.join-room-btn {
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #27ae60, #219a52);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 3px 12px rgba(39, 174, 96, 0.3);
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.join-room-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 16px rgba(39, 174, 96, 0.4);
}

.join-room-btn:active {
    transform: translateY(0);
}

.loading-rooms, .no-rooms {
    text-align: center;
    color: #6c757d;
    font-style: italic;
    padding: 2rem;
    background: rgba(108, 117, 125, 0.05);
    border-radius: 12px;
    border: 2px dashed #dee2e6;
}


@media (max-width: 768px) {
    .join-room-section {
        padding: 2rem;
    }
    
    .join-layout {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }
    
    .manual-join-section .join-method {
        max-width: none;
    }
    
    .join-method {
        padding: 1.25rem;
    }
    
    .join-method h4 {
        font-size: 1rem;
    }
    
    .active-rooms h4 {
        font-size: 1.1rem;
    }
    
    .rooms-list {
        max-height: 300px;
    }
    
    .room-item {
        flex-direction: column;
        align-items: stretch;
        gap: 1rem;
        text-align: center;
    }
    
    .join-room-btn {
        width: 100%;
    }
}

/* Game Room */
.room-header {
    display: flex;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
}

.header-left {
    flex: 1;
    min-width: 0;
}

.header-right {
    flex: 1;
    min-width: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 1.5rem;
    backdrop-filter: blur(10px);
}

.rules-box {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 1.5rem;
    backdrop-filter: blur(10px);
    height: 100%;
}

.rules-box h3 {
    color: #2c3e50;
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
    border-bottom: 2px solid #e74c3c;
    padding-bottom: 0.5rem;
}

#game-rules-content {
    color: #34495e;
    line-height: 1.6;
}

#game-rules-content ul {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
}

#game-rules-content li {
    margin: 0.3rem 0;
}

.room-info h2 {
    color: #2c3e50;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.room-code {
    color: #7f8c8d;
    font-family: 'Courier New', monospace;
    font-size: 1rem;
    font-weight: 600;
}

#leave-room-btn {
    padding: 0.75rem 1.5rem;
    background: #e74c3c;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

#leave-room-btn:hover {
    background: #c0392b;
    transform: translateY(-2px);
}

/* game-status div removed from HTML */

/* Player Info Container */
.player-info-container {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
}

.player-info-container h3 {
    color: #2c3e50;
    margin-bottom: 1rem;
    font-size: 1.2rem;
}

.players-list {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
}

.players-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.players-list h3 {
    color: #2c3e50;
    font-size: 1.2rem;
    margin: 0;
}

/* Game Area - Where specific game modules render */
.game-area {
    background: rgba(255, 255, 255, 0.95);
    border: 1px solid rgba(52, 152, 219, 0.3);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
}

#start-game-btn-header {
    padding: 0.5rem 1rem;
    background: #27ae60;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
}

#start-game-btn-header:hover {
    background: #219a52;
    transform: translateY(-2px);
}

.player {
    display: flex;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #ecf0f1;
}

.player:last-child {
    border-bottom: none;
}

.player-name {
    color: #2c3e50;
    font-weight: 500;
    flex: 1;
}

.player-symbol {
    color: #7f8c8d;
    font-weight: 600;
    margin-left: 0.5rem;
}

.player-status {
    color: #27ae60;
    font-size: 1.2rem;
    margin-left: 0.5rem;
}

/* Game Boards */
#game-board-container {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
    min-height: 300px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.empty-board {
    color: #7f8c8d;
    font-size: 1.1rem;
    text-align: center;
}

/* Tic Tac Toe Board */
.tic-tac-toe-board {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 5px;
    max-width: 300px;
    margin: 0 auto;
}

.tic-tac-toe-cell {
    width: 80px;
    height: 80px;
    background: #ecf0f1;
    border: 2px solid #bdc3c7;
    border-radius: 8px;
    font-size: 2rem;
    font-weight: bold;
    color: #2c3e50;
    cursor: pointer;
    transition: all 0.2s ease;
}

.tic-tac-toe-cell:hover:not(:disabled) {
    background: #d5dbdb;
    transform: scale(1.05);
}

.tic-tac-toe-cell:disabled {
    cursor: not-allowed;
    opacity: 0.7;
}

/* Connect Four Board */
.connect-four-board {
    text-align: center;
}

.connect-four-columns {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
}

.connect-four-column-btn {
    width: 40px;
    height: 40px;
    margin: 0 2px;
    background: #3498db;
    color: white;
    border: none;
    border-radius: 50%;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.connect-four-column-btn:hover {
    background: #2980b9;
    transform: translateY(-2px);
}

.connect-four-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    grid-template-rows: repeat(6, 1fr);
    gap: 5px;
    max-width: 350px;
    margin: 0 auto;
}

.connect-four-cell {
    width: 45px;
    height: 45px;
    background: #ecf0f1;
    border: 2px solid #bdc3c7;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: bold;
}

.connect-four-cell.filled {
    background: #e74c3c;
    color: white;
}

/* Rock Paper Scissors Board */
.rock-paper-scissors-board {
    text-align: center;
}

.rock-paper-scissors-board h3 {
    color: #2c3e50;
    margin-bottom: 1.5rem;
    font-size: 1.3rem;
}

.rps-choices {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
}

.rps-choice {
    padding: 1rem 2rem;
    background: #3498db;
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 120px;
}

.rps-choice:hover {
    background: #2980b9;
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.rps-results {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
    max-height: 200px;
    overflow-y: auto;
}

.rps-move {
    padding: 0.5rem 0;
    border-bottom: 1px solid #e9ecef;
    color: #495057;
}

.rps-move:last-child {
    border-bottom: none;
}

/* Generic Board */
.generic-board {
    text-align: center;
}

.generic-board p {
    color: #2c3e50;
    font-size: 1.1rem;
    margin-bottom: 1rem;
}

.generic-board pre {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1rem;
    text-align: left;
    font-size: 0.9rem;
    color: #495057;
    overflow-x: auto;
}

/* Game Controls */
.game-controls {
    text-align: center;
}

#restart-game-btn {
    padding: 0.75rem 2rem;
    background: #27ae60;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
}

#restart-game-btn:hover {
    background: #219a52;
    transform: translateY(-2px);
}

/* Loading Overlay */
.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(5px);
}

.spinner {
    width: 50px;
    height: 50px;
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-top: 4px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.overlay p {
    color: white;
    font-size: 1.1rem;
    font-weight: 500;
}

/* Error Messages */
.error-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1001;
}

.error-message {
    background: #e74c3c;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    margin-bottom: 0.5rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    animation: slideIn 0.3s ease-out;
    max-width: 400px;
}

.error-message.fade-out {
    animation: fadeOut 0.3s ease-out forwards;
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes fadeOut {
    from {
        opacity: 1;
        transform: scale(1);
    }
    to {
        opacity: 0;
        transform: scale(0.95);
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    header {
        padding: 1rem;
        flex-direction: column;
        gap: 1rem;
    }

    main {
        padding: 1rem;
    }

    .games-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .room-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    #room-code-input {
        margin-right: 0;
        margin-bottom: 1rem;
        width: 100%;
        max-width: 200px;
    }

    .rps-choices {
        flex-direction: column;
        align-items: center;
    }

    .connect-four-grid {
        max-width: 280px;
    }

    .connect-four-cell {
        width: 35px;
        height: 35px;
    }

    .tic-tac-toe-cell {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
    }

    .error-message {
        margin: 0 10px;
        max-width: calc(100vw - 40px);
    }
}

/* Button States */
button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
}

button:active {
    transform: scale(0.98);
}

/* Focus styles for accessibility */
button:focus,
input:focus {
    outline: 2px solid #3498db;
    outline-offset: 2px;
}

/* Drawing Game Styles */
.drawing-controls {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
}

.drawing-tools {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
}

.drawing-tools label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #2c3e50;
    font-weight: 500;
}

.drawing-tools input[type="color"] {
    width: 40px;
    height: 30px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.drawing-tools input[type="range"] {
    width: 100px;
}

#clear-canvas-btn {
    padding: 0.5rem 1rem;
    background: #e74c3c;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
}

#clear-canvas-btn:hover {
    background: #c0392b;
}

.word-display {
    text-align: center;
    font-size: 1.5rem;
    font-weight: 600;
    color: #2c3e50;
    margin: 1rem 0;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 8px;
    border: 2px dashed #bdc3c7;
}

.guess-input {
    display: flex;
    align-items: center;
    gap: 1rem;
    justify-content: center;
    margin: 1rem 0;
}

#guess-input {
    padding: 0.75rem 1rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1rem;
    flex: 1;
    max-width: 300px;
}

#guess-input:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

#submit-guess-btn {
    padding: 0.75rem 1.5rem;
    background: #27ae60;
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

#submit-guess-btn:hover {
    background: #219a52;
}

.game-timer {
    text-align: center;
    font-size: 1.2rem;
    font-weight: 600;
    color: #e74c3c;
    margin-top: 1rem;
}

#start-game-btn {
    padding: 0.75rem 2rem;
    background: #27ae60;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-right: 1rem;
}

#start-game-btn:hover {
    background: #219a52;
    transform: translateY(-2px);
}

.drawing-canvas {
    border: 2px solid #bdc3c7;
    border-radius: 8px;
    cursor: crosshair;
    display: block;
    margin: 0 auto;
    max-width: 100%;
    background: white;
}

.drawing-canvas.disabled {
    cursor: not-allowed;
    opacity: 0.7;
}

@media (max-width: 768px) {
    .drawing-tools {
        justify-content: center;
    }
    
    .guess-input {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    #guess-input {
        max-width: 100%;
    }
    
    .drawing-canvas {
        max-width: 90vw;
        max-height: 60vh;
    }
}

/* Floating Emoji Animations */
@keyframes move-x {
    0% { transform: translateX(0vw); }
    100% { transform: translateX(90vw); }
}

@keyframes move-x-chaos1 {
    0% { transform: translateX(0vw); }
    25% { transform: translateX(70vw); }
    50% { transform: translateX(20vw); }
    75% { transform: translateX(80vw); }
    100% { transform: translateX(10vw); }
}

@keyframes move-x-chaos2 {
    0% { transform: translateX(0vw); }
    20% { transform: translateX(30vw); }
    40% { transform: translateX(85vw); }
    60% { transform: translateX(15vw); }
    80% { transform: translateX(60vw); }
    100% { transform: translateX(5vw); }
}

@keyframes move-y {
    0% { transform: translateY(0vh); }
    100% { transform: translateY(80vh); }
}

@keyframes move-y-chaos1 {
    0% { transform: translateY(0vh); }
    25% { transform: translateY(60vh); }
    50% { transform: translateY(20vh); }
    75% { transform: translateY(70vh); }
    100% { transform: translateY(10vh); }
}

@keyframes move-y-chaos2 {
    0% { transform: translateY(0vh); }
    20% { transform: translateY(40vh); }
    40% { transform: translateY(75vh); }
    60% { transform: translateY(15vh); }
    80% { transform: translateY(55vh); }
    100% { transform: translateY(5vh); }
}

@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-10px) rotate(2deg); }
    50% { transform: translateY(5px) rotate(-2deg); }
    75% { transform: translateY(-5px) rotate(1deg); }
}

/* Floating emoji base styles */
.floating-emoji {
    position: fixed !important;
    z-index: 10000 !important;
    pointer-events: none !important;
    user-select: none !important;
    font-size: 4rem !important;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3) !important;
}

.floating-emoji-x {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    z-index: 10000 !important;
    pointer-events: none !important;
    user-select: none !important;
}

.floating-emoji-y {
    font-size: 4rem !important;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3) !important;
}

/* Checkbox Game Styles */
.checkbox-game-ui {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.game-info-container h3 {
    color: #2c3e50;
    font-size: 1.5rem;
    font-weight: 600;
    text-align: center;
    margin-bottom: 1.5rem;
}

.connection-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f8f9fa;
    border: 2px solid #e9ecef;
    border-radius: 10px;
    padding: 1rem 1.5rem;
    margin-bottom: 2rem;
    transition: all 0.3s ease;
}

.connection-info:hover {
    border-color: #3498db;
    box-shadow: 0 4px 20px rgba(52, 152, 219, 0.15);
}

.connection-status {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-weight: 600;
    font-size: 1rem;
}

.status-indicator {
    font-size: 1.2rem;
    font-weight: bold;
    text-shadow: 0 0 3px currentColor;
    transition: all 0.3s ease;
}

.status-indicator.connected {
    color: #27ae60;
    animation: pulse-connected 2s ease-in-out infinite;
}

.status-indicator.disconnected {
    color: #e74c3c;
    animation: pulse-disconnected 1.5s ease-in-out infinite;
}

@keyframes pulse-connected {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.7; transform: scale(1.1); }
}

@keyframes pulse-disconnected {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

.player-count-display {
    color: #495057;
    font-weight: 600;
    font-size: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.player-count-display::before {
    content: "👥";
    font-size: 1.2rem;
}

.checkbox-grid-container {
    display: flex;
    justify-content: center;
    margin: 2rem 0;
}

.checkbox-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    gap: 15px;
    padding: 20px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 3px solid #dee2e6;
    border-radius: 16px;
    box-shadow: 
        inset 0 2px 8px rgba(0, 0, 0, 0.1),
        0 4px 20px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.checkbox-grid:hover {
    box-shadow: 
        inset 0 2px 8px rgba(0, 0, 0, 0.15),
        0 6px 25px rgba(0, 0, 0, 0.15);
    transform: translateY(-2px);
}

.checkbox-item {
    width: 80px;
    height: 80px;
    background: white;
    border: 3px solid #bdc3c7;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    user-select: none;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.checkbox-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #3498db, #2980b9);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
}

.checkbox-item:hover:not(.checked) {
    border-color: #3498db;
    transform: scale(1.05);
    box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
}

.checkbox-item:hover:not(.checked)::before {
    opacity: 0.1;
}

.checkbox-item.checked {
    background: linear-gradient(135deg, #27ae60 0%, #219a52 100%);
    border-color: #219a52;
    transform: scale(1.02);
    box-shadow: 
        0 4px 20px rgba(39, 174, 96, 0.4),
        inset 0 2px 4px rgba(255, 255, 255, 0.3);
}

.checkbox-item.checked .checkbox-icon {
    color: white;
    font-size: 2.5rem;
    font-weight: bold;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    animation: checkmark-bounce 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    z-index: 2;
    position: relative;
}

@keyframes checkmark-bounce {
    0% { 
        transform: scale(0) rotate(180deg);
        opacity: 0;
    }
    50% { 
        transform: scale(1.3) rotate(0deg);
        opacity: 0.8;
    }
    100% { 
        transform: scale(1) rotate(0deg);
        opacity: 1;
    }
}

.checkbox-item:active {
    transform: scale(0.95);
}

.game-instructions {
    text-align: center;
    background: rgba(52, 152, 219, 0.1);
    border: 2px solid rgba(52, 152, 219, 0.2);
    border-radius: 10px;
    padding: 1.25rem;
    margin-top: 2rem;
}

.game-instructions p {
    color: #2c3e50;
    font-size: 1.1rem;
    font-weight: 500;
    margin: 0;
    line-height: 1.5;
}

/* Mobile Responsive Design for Checkbox Game */
@media (max-width: 768px) {
    .checkbox-game-ui {
        padding: 1.5rem;
        margin: 0 -0.5rem 1.5rem -0.5rem;
    }
    
    .game-info-container h3 {
        font-size: 1.3rem;
    }
    
    .connection-info {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
    
    .checkbox-grid {
        gap: 10px;
        padding: 15px;
    }
    
    .checkbox-item {
        width: 60px;
        height: 60px;
    }
    
    .checkbox-item.checked .checkbox-icon {
        font-size: 2rem;
    }
    
    .game-instructions {
        padding: 1rem;
    }
    
    .game-instructions p {
        font-size: 1rem;
    }
}

@media (max-width: 480px) {
    .checkbox-grid {
        gap: 8px;
        padding: 12px;
    }
    
    .checkbox-item {
        width: 50px;
        height: 50px;
        border-radius: 8px;
    }
    
    .checkbox-item.checked .checkbox-icon {
        font-size: 1.5rem;
    }
}

/* Emoji Picker Override - Force on top with absolute positioning */
#emoji-picker {
    position: absolute !important;
    z-index: 999999 !important;
    background: white !important;
    border: 2px solid #ccc !important;
    border-radius: 8px !important;
    padding: 10px !important;
    box-shadow: 0 4px 15px rgba(0,0,0,0.3) !important;
    width: 300px !important;
    max-height: 400px !important;
    overflow-y: auto !important;
    top: 40px !important;
    left: 0 !important;
}

/* Smooth transitions */
* {
    transition: opacity 0.2s ease, transform 0.2s ease;
}

/* Checkbox Game Styles */
.checkbox-game-board {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
    text-align: center;
}

.checkbox-game-board .game-info h3 {
    color: #2c3e50;
    font-size: 1.3rem;
    margin-bottom: 0.5rem;
}

.checkbox-game-board .game-info p {
    color: #7f8c8d;
    font-size: 0.9rem;
    margin-bottom: 1.5rem;
}

.game-layout {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 3rem;
    margin-top: 2rem;
}

.scoreboard {
    background: #f8f9fa;
    border: 2px solid #dee2e6;
    border-radius: 12px;
    padding: 1.5rem;
    min-width: 200px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.scoreboard h4 {
    color: #2c3e50;
    font-size: 1.2rem;
    font-weight: 600;
    text-align: center;
    margin-bottom: 1rem;
    border-bottom: 2px solid #3498db;
    padding-bottom: 0.5rem;
}

.score-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.score-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    transition: all 0.2s ease;
}

.score-item:hover {
    border-color: #3498db;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(52, 152, 219, 0.15);
}

.score-player {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    color: #2c3e50;
}

.score-player-emoji {
    font-size: 1.2rem;
}

.score-points {
    font-weight: bold;
    color: #27ae60;
    font-size: 1.1rem;
    background: rgba(39, 174, 96, 0.1);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    min-width: 30px;
    text-align: center;
}

/* End Game Screen */
.end-game-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10001;
    backdrop-filter: blur(10px);
}

.end-game-content {
    background: white;
    border-radius: 16px;
    padding: 3rem;
    text-align: center;
    max-width: 500px;
    width: 90%;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    animation: gameEndFadeIn 0.5s ease-out;
    position: relative;
    margin: auto;
}

@keyframes gameEndFadeIn {
    from {
        opacity: 0;
        transform: scale(0.8) translateY(50px);
    }
    to {
        opacity: 1;
        transform: scale(1) translateY(0);
    }
}

#game-result-message {
    color: #2c3e50;
    font-size: 2.5rem;
    font-weight: bold;
    margin: 0 auto 2rem auto;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    text-align: center;
    display: block;
    width: 100%;
}

.final-scores {
    background: #f8f9fa;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
}

.final-scores h4 {
    color: #2c3e50;
    font-size: 1.3rem;
    margin-bottom: 1rem;
}

.final-score-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid #dee2e6;
    font-size: 1.1rem;
}

.final-score-item:last-child {
    border-bottom: none;
}

.final-score-player {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-weight: 500;
    color: #2c3e50;
}

.final-score-emoji {
    font-size: 1.3rem;
}

.final-score-points {
    font-weight: bold;
    color: #27ae60;
    font-size: 1.2rem;
}

.ok-btn {
    padding: 1rem 3rem;
    background: linear-gradient(135deg, #3498db, #2980b9);
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 6px 20px rgba(52, 152, 219, 0.3);
    text-transform: uppercase;
    letter-spacing: 1px;
}

.ok-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(52, 152, 219, 0.4);
    background: linear-gradient(135deg, #2980b9, #1f5f8b);
}

.ok-btn:active {
    transform: translateY(-1px);
}

/* Duplicate checkbox styles removed - see lines 1428-1510 for checkbox styling */

/* Name control responsive styles */
.responsive-name-control {
    display: flex;
    gap: 12px;
    align-items: center;
}

.name-input-group {
    display: flex;
    gap: 8px;
    flex: 1;
    align-items: center;
}

.name-input {
    padding: 10px 12px;
    border: 2px solid #ddd;
    border-radius: 6px;
    flex: 1;
    font-size: 14px;
    box-sizing: border-box;
}

.update-btn {
    padding: 10px 20px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 600;
    transition: background 0.2s;
    white-space: nowrap;
}

/* Responsive breakpoint aligned with header wrapping (when "Incorporated" moves to second line) */
@media (max-width: 820px) {
    .responsive-name-control {
        flex-direction: column;
        align-items: stretch;
        gap: 8px;
    }
    
    .name-label {
        min-width: unset !important;
    }
    
    .name-input-group {
        flex-direction: column;
        gap: 8px;
    }
    
    .name-input {
        width: 100%;
    }
    
    .update-btn {
        width: 100%;
        padding: 12px 20px;
        font-size: 16px; /* Better touch target */
    }
}

/* Additional mobile-specific adjustments */
@media (max-width: 600px) {
    /* Adjust player controls padding on mobile */
    #player-controls {
        padding-left: 20px !important;
        min-width: unset !important;
    }
    
    /* Stack the Players and Who Are You sections vertically */
    .waiting-room-content > div {
        flex-direction: column !important;
        gap: 30px;
    }
    
    .waiting-room-content > div > .players-list {
        border-right: none !important;
        padding-right: 0 !important;
        border-bottom: 2px solid #e0e0e0;
        padding-bottom: 30px;
    }
    
    .waiting-room-content > div > #player-controls {
        border-left: none !important;
    }
}


/* Mobile responsive styles for new layout */
@media (max-width: 768px) {
    .checkbox-grid {
        max-width: 240px;
        gap: 8px;
    }
    
    .checkbox-item {
        width: 50px;
        height: 50px;
    }
    
    .checkbox-item.checked::after {
        font-size: 20px;
    }
    
    .game-layout {
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }
    
    .scoreboard {
        width: 100%;
        max-width: 300px;
        order: 2;
    }
    
    .checkbox-grid {
        order: 1;
    }
    
    .end-game-content {
        padding: 2rem;
        margin: 1rem;
    }
    
    #game-result-message {
        font-size: 1.5rem;
    }
    
    .final-scores {
        padding: 1rem;
    }
    
    .ok-btn {
        padding: 0.75rem 2rem;
        font-size: 1rem;
    }
}

/* Version Info Footer */
.version-info {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.7);
    color: rgba(255, 255, 255, 0.8);
    padding: 0.5rem 1rem;
    backdrop-filter: blur(10px);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    z-index: 100;
}

#version-display {
    font-family: 'Courier New', monospace;
    font-size: 0.75rem;
    text-align: center;
    letter-spacing: 0.5px;
}

/* Ensure main content doesn't overlap footer */
main {
    padding-bottom: 3rem;
}

/* Chat Area - Yahoo! Games-style chat interface */
.chat-area {
    background: #e8e8e8;
    border: 2px solid #999;
    border-radius: 0;
    padding: 0;
    margin-bottom: 1.5rem;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    height: 400px;
}

.chat-header {
    background: linear-gradient(180deg, #5a9fd4 0%, #3d7fb8 100%);
    color: white;
    padding: 0.4rem 0.75rem;
    border-bottom: 2px solid #2d5a8e;
    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.2);
}

.chat-header h3 {
    font-size: 0.95rem;
    margin: 0;
    font-weight: bold;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
    letter-spacing: 0.5px;
}

.chat-main-container {
    display: flex;
    flex: 1;
    background: white;
    overflow: hidden;
}

.chat-messages-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: white;
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 0.5rem;
    background: white;
    font-family: 'Verdana', 'Arial', sans-serif;
    display: flex;
    flex-direction: column;
    min-height: 0;
}

.chat-messages-wrapper {
    margin-top: auto;
}

.chat-message {
    padding: 0.2rem 0;
    margin-bottom: 0.2rem;
    word-wrap: break-word;
    font-size: 0.8rem;
    line-height: 1.3;
}

.chat-author {
    font-weight: bold;
    color: #0066cc;
    margin-right: 0.3rem;
    font-size: 0.8rem;
}

.chat-text {
    color: #000;
    font-size: 0.8rem;
}

.chat-input-area {
    display: flex;
    gap: 0.4rem;
    padding: 0.5rem;
    background: #f0f0f0;
    border-top: 1px solid #ccc;
}

.chat-users-panel {
    width: 180px;
    background: #f5f5f5;
    border-left: 2px solid #ccc;
    display: flex;
    flex-direction: column;
}

.chat-users-list {
    flex: 1;
    overflow-y: auto;
    padding: 0;
}

.chat-users-section {
    border-bottom: 1px solid #ddd;
}

.chat-users-section:last-child {
    border-bottom: none;
}

.chat-users-header {
    font-size: 0.7rem;
    font-weight: bold;
    color: #444;
    text-transform: uppercase;
    padding: 0.4rem 0.5rem;
    background: linear-gradient(180deg, #e0e0e0 0%, #d0d0d0 100%);
    border-bottom: 1px solid #bbb;
    border-top: 1px solid #fff;
    letter-spacing: 0.5px;
    font-family: 'Verdana', 'Arial', sans-serif;
}

.chat-user-item {
    display: flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-family: 'Verdana', 'Arial', sans-serif;
    transition: background-color 0.15s;
    cursor: default;
}

.chat-user-item:hover {
    background: #d4e4f4;
}

.chat-user-item.spectator {
    font-style: italic;
    opacity: 0.85;
}

.chat-user-emoji {
    margin-right: 0.35rem;
    font-size: 0.85rem;
}

.chat-user-name {
    flex: 1;
    color: #222;
    font-weight: 500;
}

.chat-user-badge {
    margin-left: 0.3rem;
    font-size: 0.75rem;
}

#chat-input {
    flex: 1;
    padding: 0.35rem 0.5rem;
    border: 1px solid #999;
    border-radius: 2px;
    font-size: 0.8rem;
    font-family: 'Verdana', 'Arial', sans-serif;
    background: white;
}

#chat-input:focus {
    outline: none;
    border-color: #4a90e2;
    box-shadow: inset 0 0 3px rgba(74, 144, 226, 0.3);
}

#chat-send-btn {
    padding: 0.35rem 0.9rem;
    background: linear-gradient(180deg, #6db3f2 0%, #4a90e2 50%, #3d7fb8 100%);
    color: white;
    border: 1px solid #2d5a8e;
    border-radius: 2px;
    font-weight: bold;
    font-size: 0.75rem;
    font-family: 'Verdana', 'Arial', sans-serif;
    cursor: pointer;
    transition: all 0.15s;
    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
}

#chat-send-btn:hover:not(:disabled) {
    background: linear-gradient(180deg, #5da2e2 0%, #3a80d2 50%, #2d6fa8 100%);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
}

#chat-send-btn:active:not(:disabled) {
    transform: translateY(1px);
    box-shadow: 0 0 1px rgba(0, 0, 0, 0.2);
}

#chat-send-btn:disabled {
    background: #c0c0c0;
    border-color: #999;
    color: #666;
    cursor: not-allowed;
    opacity: 0.7;
    text-shadow: none;
}

/* County Game Styles */
.county-game-waiting,
.county-game-submission,
.county-game-announcement {
    text-align: center;
    padding: 2rem;
    max-width: 600px;
    margin: 0 auto;
}

.county-game-submission h2 {
    color: #333;
    margin-bottom: 1rem;
}

.county-game-submission .timer-display {
    font-size: 1.2rem;
    color: #666;
    margin-bottom: 2rem;
    font-weight: 600;
}

.county-game-submission .submission-form {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.county-game-submission #county-input {
    width: 100%;
    max-width: 400px;
    padding: 0.75rem;
    font-size: 1.1rem;
    border: 2px solid #ddd;
    border-radius: 6px;
    margin: 1rem 0;
    text-align: center;
}

.county-game-submission #county-input:focus {
    outline: none;
    border-color: #007bff;
}

.county-game-submission .submit-btn {
    background: #28a745;
    color: white;
    border: none;
    padding: 0.75rem 2rem;
    font-size: 1.1rem;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.2s;
}

.county-game-submission .submit-btn:hover {
    background: #218838;
}

.county-game-submission .submission-complete {
    background: #f8f9fa;
    padding: 2rem;
    border-radius: 12px;
    border: 2px solid #28a745;
}

.county-game-submission .submitted-county {
    font-size: 1.2rem;
    color: #333;
    margin: 1rem 0;
}

.county-game-submission .submission-status {
    margin-top: 1.5rem;
    font-size: 1rem;
    color: #666;
    padding: 0.5rem;
    background: white;
    border-radius: 6px;
}

/* County Game Announcement Phase */
.county-game-announcement h2 {
    color: #333;
    margin-bottom: 2rem;
}

.announcement-display {
    background: #ffffff;
    padding: 2.5rem 2rem;
    border-radius: 16px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.08);
    margin: 2rem auto;
    animation: slideIn 0.5s ease-out;
    max-width: 500px;
    border: 1px solid #e8f0fe;
    text-align: center;
    position: relative;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(20px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.announcement-display .player-number {
    font-size: 0.9rem;
    color: #8b92a8;
    margin-bottom: 1.5rem;
    font-weight: 600;
    letter-spacing: 3px;
    text-transform: uppercase;
}

.announcement-display .player-info {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
}

.announcement-display .player-emoji {
    font-size: 2.5rem;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
}

.announcement-display .player-name {
    font-size: 1.5rem;
    color: #2c3e50;
    font-weight: 600;
}

.announcement-display .county-name {
    font-size: 2.2rem;
    color: #5e72e4;
    font-weight: 700;
    margin-top: 1rem;
    font-style: normal;
    line-height: 1.3;
    word-wrap: break-word;
    padding: 0 1rem;
}

.announcement-waiting {
    padding: 3rem;
    background: #f8f9fa;
    border-radius: 12px;
    color: #666;
}

.host-controls {
    margin-top: 2rem;
}

.host-controls .control-btn {
    background: #5e72e4;
    color: white;
    border: none;
    padding: 0.9rem 2.5rem;
    font-size: 1.1rem;
    font-weight: 600;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s;
    box-shadow: 0 4px 12px rgba(94, 114, 228, 0.25);
    letter-spacing: 0.5px;
    text-transform: uppercase;
}

.host-controls .control-btn:hover {
    background: #4c63d2;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(94, 114, 228, 0.35);
}

.host-controls .control-btn:active {
    transform: translateY(0);
}

.host-controls p {
    color: #666;
    font-size: 1.1rem;
    margin-bottom: 1rem;
}`,
  '/static/version.json': `{
  "version": "1.1.2",
  "baseVersion": "1.1.2",
  "branch": "county-game",
  "commit": "a177739",
  "timestamp": "2025-08-18T03:11:57.758Z",
  "deployedAt": "Aug 17, 2025, 09:11 PM MDT"
}`
};

export const assetPaths = Object.keys(staticAssets);
